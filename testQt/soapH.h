/* soapH.h
   Generated by gSOAP 2.8.124 for gmafHeader

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getCollectionResponse_DEFINED
#define SOAP_TYPE_ns1__getCollectionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCollectionResponse(struct soap*, const char*, int, const ns1__getCollectionResponse *, const char*);
SOAP_FMAC3 ns1__getCollectionResponse * SOAP_FMAC4 soap_in_ns1__getCollectionResponse(struct soap*, const char*, ns1__getCollectionResponse *, const char*);
SOAP_FMAC1 ns1__getCollectionResponse * SOAP_FMAC2 soap_instantiate_ns1__getCollectionResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getCollectionResponse * soap_new_ns1__getCollectionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getCollectionResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getCollectionResponse * soap_new_req_ns1__getCollectionResponse(
	struct soap *soap)
{
	ns1__getCollectionResponse *_p = ::soap_new_ns1__getCollectionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getCollectionResponse * soap_new_set_ns1__getCollectionResponse(
	struct soap *soap,
	const std::vector<ns1__mmfg *> & return_)
{
	ns1__getCollectionResponse *_p = ::soap_new_ns1__getCollectionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getCollectionResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getCollectionResponse(struct soap *soap, ns1__getCollectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCollectionResponse", p->soap_type() == SOAP_TYPE_ns1__getCollectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getCollectionResponse(struct soap *soap, const char *URL, ns1__getCollectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCollectionResponse", p->soap_type() == SOAP_TYPE_ns1__getCollectionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getCollectionResponse(struct soap *soap, const char *URL, ns1__getCollectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCollectionResponse", p->soap_type() == SOAP_TYPE_ns1__getCollectionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getCollectionResponse(struct soap *soap, const char *URL, ns1__getCollectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCollectionResponse", p->soap_type() == SOAP_TYPE_ns1__getCollectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getCollectionResponse * SOAP_FMAC4 soap_get_ns1__getCollectionResponse(struct soap*, ns1__getCollectionResponse *, const char*, const char*);

inline int soap_read_ns1__getCollectionResponse(struct soap *soap, ns1__getCollectionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getCollectionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getCollectionResponse(struct soap *soap, const char *URL, ns1__getCollectionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getCollectionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getCollectionResponse(struct soap *soap, ns1__getCollectionResponse *p)
{
	if (::soap_read_ns1__getCollectionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getCollection_DEFINED
#define SOAP_TYPE_ns1__getCollection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCollection(struct soap*, const char*, int, const ns1__getCollection *, const char*);
SOAP_FMAC3 ns1__getCollection * SOAP_FMAC4 soap_in_ns1__getCollection(struct soap*, const char*, ns1__getCollection *, const char*);
SOAP_FMAC1 ns1__getCollection * SOAP_FMAC2 soap_instantiate_ns1__getCollection(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getCollection * soap_new_ns1__getCollection(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getCollection(soap, n, NULL, NULL, NULL);
}

inline ns1__getCollection * soap_new_req_ns1__getCollection(
	struct soap *soap)
{
	ns1__getCollection *_p = ::soap_new_ns1__getCollection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getCollection * soap_new_set_ns1__getCollection(
	struct soap *soap,
	std::string *arg0)
{
	ns1__getCollection *_p = ::soap_new_ns1__getCollection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getCollection::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns1__getCollection(struct soap *soap, ns1__getCollection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCollection", p->soap_type() == SOAP_TYPE_ns1__getCollection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getCollection(struct soap *soap, const char *URL, ns1__getCollection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCollection", p->soap_type() == SOAP_TYPE_ns1__getCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getCollection(struct soap *soap, const char *URL, ns1__getCollection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCollection", p->soap_type() == SOAP_TYPE_ns1__getCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getCollection(struct soap *soap, const char *URL, ns1__getCollection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getCollection", p->soap_type() == SOAP_TYPE_ns1__getCollection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getCollection * SOAP_FMAC4 soap_get_ns1__getCollection(struct soap*, ns1__getCollection *, const char*, const char*);

inline int soap_read_ns1__getCollection(struct soap *soap, ns1__getCollection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getCollection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getCollection(struct soap *soap, const char *URL, ns1__getCollection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getCollection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getCollection(struct soap *soap, ns1__getCollection *p)
{
	if (::soap_read_ns1__getCollection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__processAssetFromFileResponse_DEFINED
#define SOAP_TYPE_ns1__processAssetFromFileResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromFileResponse(struct soap*, const char*, int, const ns1__processAssetFromFileResponse *, const char*);
SOAP_FMAC3 ns1__processAssetFromFileResponse * SOAP_FMAC4 soap_in_ns1__processAssetFromFileResponse(struct soap*, const char*, ns1__processAssetFromFileResponse *, const char*);
SOAP_FMAC1 ns1__processAssetFromFileResponse * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processAssetFromFileResponse * soap_new_ns1__processAssetFromFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processAssetFromFileResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__processAssetFromFileResponse * soap_new_req_ns1__processAssetFromFileResponse(
	struct soap *soap)
{
	ns1__processAssetFromFileResponse *_p = ::soap_new_ns1__processAssetFromFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__processAssetFromFileResponse * soap_new_set_ns1__processAssetFromFileResponse(
	struct soap *soap,
	ns1__mmfg *return_)
{
	ns1__processAssetFromFileResponse *_p = ::soap_new_ns1__processAssetFromFileResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processAssetFromFileResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__processAssetFromFileResponse(struct soap *soap, ns1__processAssetFromFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromFileResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processAssetFromFileResponse(struct soap *soap, const char *URL, ns1__processAssetFromFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromFileResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromFileResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processAssetFromFileResponse(struct soap *soap, const char *URL, ns1__processAssetFromFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromFileResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromFileResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processAssetFromFileResponse(struct soap *soap, const char *URL, ns1__processAssetFromFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromFileResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromFileResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processAssetFromFileResponse * SOAP_FMAC4 soap_get_ns1__processAssetFromFileResponse(struct soap*, ns1__processAssetFromFileResponse *, const char*, const char*);

inline int soap_read_ns1__processAssetFromFileResponse(struct soap *soap, ns1__processAssetFromFileResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processAssetFromFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processAssetFromFileResponse(struct soap *soap, const char *URL, ns1__processAssetFromFileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processAssetFromFileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__processAssetFromFileResponse(struct soap *soap, ns1__processAssetFromFileResponse *p)
{
	if (::soap_read_ns1__processAssetFromFileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__processAssetFromFile_DEFINED
#define SOAP_TYPE_ns1__processAssetFromFile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromFile(struct soap*, const char*, int, const ns1__processAssetFromFile *, const char*);
SOAP_FMAC3 ns1__processAssetFromFile * SOAP_FMAC4 soap_in_ns1__processAssetFromFile(struct soap*, const char*, ns1__processAssetFromFile *, const char*);
SOAP_FMAC1 ns1__processAssetFromFile * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromFile(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processAssetFromFile * soap_new_ns1__processAssetFromFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processAssetFromFile(soap, n, NULL, NULL, NULL);
}

inline ns1__processAssetFromFile * soap_new_req_ns1__processAssetFromFile(
	struct soap *soap)
{
	ns1__processAssetFromFile *_p = ::soap_new_ns1__processAssetFromFile(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__processAssetFromFile * soap_new_set_ns1__processAssetFromFile(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	ns1__processAssetFromFile *_p = ::soap_new_ns1__processAssetFromFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processAssetFromFile::arg0 = arg0;
		_p->ns1__processAssetFromFile::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__processAssetFromFile(struct soap *soap, ns1__processAssetFromFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromFile", p->soap_type() == SOAP_TYPE_ns1__processAssetFromFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processAssetFromFile(struct soap *soap, const char *URL, ns1__processAssetFromFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromFile", p->soap_type() == SOAP_TYPE_ns1__processAssetFromFile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processAssetFromFile(struct soap *soap, const char *URL, ns1__processAssetFromFile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromFile", p->soap_type() == SOAP_TYPE_ns1__processAssetFromFile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processAssetFromFile(struct soap *soap, const char *URL, ns1__processAssetFromFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromFile", p->soap_type() == SOAP_TYPE_ns1__processAssetFromFile ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processAssetFromFile * SOAP_FMAC4 soap_get_ns1__processAssetFromFile(struct soap*, ns1__processAssetFromFile *, const char*, const char*);

inline int soap_read_ns1__processAssetFromFile(struct soap *soap, ns1__processAssetFromFile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processAssetFromFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processAssetFromFile(struct soap *soap, const char *URL, ns1__processAssetFromFile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processAssetFromFile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__processAssetFromFile(struct soap *soap, ns1__processAssetFromFile *p)
{
	if (::soap_read_ns1__processAssetFromFile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__setProcessingPluginsResponse_DEFINED
#define SOAP_TYPE_ns1__setProcessingPluginsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setProcessingPluginsResponse(struct soap*, const char*, int, const ns1__setProcessingPluginsResponse *, const char*);
SOAP_FMAC3 ns1__setProcessingPluginsResponse * SOAP_FMAC4 soap_in_ns1__setProcessingPluginsResponse(struct soap*, const char*, ns1__setProcessingPluginsResponse *, const char*);
SOAP_FMAC1 ns1__setProcessingPluginsResponse * SOAP_FMAC2 soap_instantiate_ns1__setProcessingPluginsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__setProcessingPluginsResponse * soap_new_ns1__setProcessingPluginsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__setProcessingPluginsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__setProcessingPluginsResponse * soap_new_req_ns1__setProcessingPluginsResponse(
	struct soap *soap)
{
	ns1__setProcessingPluginsResponse *_p = ::soap_new_ns1__setProcessingPluginsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__setProcessingPluginsResponse * soap_new_set_ns1__setProcessingPluginsResponse(
	struct soap *soap)
{
	ns1__setProcessingPluginsResponse *_p = ::soap_new_ns1__setProcessingPluginsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__setProcessingPluginsResponse(struct soap *soap, ns1__setProcessingPluginsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setProcessingPluginsResponse", p->soap_type() == SOAP_TYPE_ns1__setProcessingPluginsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__setProcessingPluginsResponse(struct soap *soap, const char *URL, ns1__setProcessingPluginsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setProcessingPluginsResponse", p->soap_type() == SOAP_TYPE_ns1__setProcessingPluginsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__setProcessingPluginsResponse(struct soap *soap, const char *URL, ns1__setProcessingPluginsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setProcessingPluginsResponse", p->soap_type() == SOAP_TYPE_ns1__setProcessingPluginsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__setProcessingPluginsResponse(struct soap *soap, const char *URL, ns1__setProcessingPluginsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setProcessingPluginsResponse", p->soap_type() == SOAP_TYPE_ns1__setProcessingPluginsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__setProcessingPluginsResponse * SOAP_FMAC4 soap_get_ns1__setProcessingPluginsResponse(struct soap*, ns1__setProcessingPluginsResponse *, const char*, const char*);

inline int soap_read_ns1__setProcessingPluginsResponse(struct soap *soap, ns1__setProcessingPluginsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__setProcessingPluginsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__setProcessingPluginsResponse(struct soap *soap, const char *URL, ns1__setProcessingPluginsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__setProcessingPluginsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__setProcessingPluginsResponse(struct soap *soap, ns1__setProcessingPluginsResponse *p)
{
	if (::soap_read_ns1__setProcessingPluginsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__setProcessingPlugins_DEFINED
#define SOAP_TYPE_ns1__setProcessingPlugins_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setProcessingPlugins(struct soap*, const char*, int, const ns1__setProcessingPlugins *, const char*);
SOAP_FMAC3 ns1__setProcessingPlugins * SOAP_FMAC4 soap_in_ns1__setProcessingPlugins(struct soap*, const char*, ns1__setProcessingPlugins *, const char*);
SOAP_FMAC1 ns1__setProcessingPlugins * SOAP_FMAC2 soap_instantiate_ns1__setProcessingPlugins(struct soap*, int, const char*, const char*, size_t*);

inline ns1__setProcessingPlugins * soap_new_ns1__setProcessingPlugins(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__setProcessingPlugins(soap, n, NULL, NULL, NULL);
}

inline ns1__setProcessingPlugins * soap_new_req_ns1__setProcessingPlugins(
	struct soap *soap)
{
	ns1__setProcessingPlugins *_p = ::soap_new_ns1__setProcessingPlugins(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__setProcessingPlugins * soap_new_set_ns1__setProcessingPlugins(
	struct soap *soap,
	std::string *arg0,
	const std::vector<std::string> & arg1)
{
	ns1__setProcessingPlugins *_p = ::soap_new_ns1__setProcessingPlugins(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__setProcessingPlugins::arg0 = arg0;
		_p->ns1__setProcessingPlugins::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__setProcessingPlugins(struct soap *soap, ns1__setProcessingPlugins const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setProcessingPlugins", p->soap_type() == SOAP_TYPE_ns1__setProcessingPlugins ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__setProcessingPlugins(struct soap *soap, const char *URL, ns1__setProcessingPlugins const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setProcessingPlugins", p->soap_type() == SOAP_TYPE_ns1__setProcessingPlugins ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__setProcessingPlugins(struct soap *soap, const char *URL, ns1__setProcessingPlugins const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setProcessingPlugins", p->soap_type() == SOAP_TYPE_ns1__setProcessingPlugins ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__setProcessingPlugins(struct soap *soap, const char *URL, ns1__setProcessingPlugins const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:setProcessingPlugins", p->soap_type() == SOAP_TYPE_ns1__setProcessingPlugins ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__setProcessingPlugins * SOAP_FMAC4 soap_get_ns1__setProcessingPlugins(struct soap*, ns1__setProcessingPlugins *, const char*, const char*);

inline int soap_read_ns1__setProcessingPlugins(struct soap *soap, ns1__setProcessingPlugins *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__setProcessingPlugins(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__setProcessingPlugins(struct soap *soap, const char *URL, ns1__setProcessingPlugins *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__setProcessingPlugins(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__setProcessingPlugins(struct soap *soap, ns1__setProcessingPlugins *p)
{
	if (::soap_read_ns1__setProcessingPlugins(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__processAssetFromBytesResponse_DEFINED
#define SOAP_TYPE_ns1__processAssetFromBytesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromBytesResponse(struct soap*, const char*, int, const ns1__processAssetFromBytesResponse *, const char*);
SOAP_FMAC3 ns1__processAssetFromBytesResponse * SOAP_FMAC4 soap_in_ns1__processAssetFromBytesResponse(struct soap*, const char*, ns1__processAssetFromBytesResponse *, const char*);
SOAP_FMAC1 ns1__processAssetFromBytesResponse * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromBytesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processAssetFromBytesResponse * soap_new_ns1__processAssetFromBytesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processAssetFromBytesResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__processAssetFromBytesResponse * soap_new_req_ns1__processAssetFromBytesResponse(
	struct soap *soap)
{
	ns1__processAssetFromBytesResponse *_p = ::soap_new_ns1__processAssetFromBytesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__processAssetFromBytesResponse * soap_new_set_ns1__processAssetFromBytesResponse(
	struct soap *soap,
	ns1__mmfg *return_)
{
	ns1__processAssetFromBytesResponse *_p = ::soap_new_ns1__processAssetFromBytesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processAssetFromBytesResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__processAssetFromBytesResponse(struct soap *soap, ns1__processAssetFromBytesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromBytesResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromBytesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processAssetFromBytesResponse(struct soap *soap, const char *URL, ns1__processAssetFromBytesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromBytesResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromBytesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processAssetFromBytesResponse(struct soap *soap, const char *URL, ns1__processAssetFromBytesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromBytesResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromBytesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processAssetFromBytesResponse(struct soap *soap, const char *URL, ns1__processAssetFromBytesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromBytesResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromBytesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processAssetFromBytesResponse * SOAP_FMAC4 soap_get_ns1__processAssetFromBytesResponse(struct soap*, ns1__processAssetFromBytesResponse *, const char*, const char*);

inline int soap_read_ns1__processAssetFromBytesResponse(struct soap *soap, ns1__processAssetFromBytesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processAssetFromBytesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processAssetFromBytesResponse(struct soap *soap, const char *URL, ns1__processAssetFromBytesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processAssetFromBytesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__processAssetFromBytesResponse(struct soap *soap, ns1__processAssetFromBytesResponse *p)
{
	if (::soap_read_ns1__processAssetFromBytesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__processAssetFromBytes_DEFINED
#define SOAP_TYPE_ns1__processAssetFromBytes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromBytes(struct soap*, const char*, int, const ns1__processAssetFromBytes *, const char*);
SOAP_FMAC3 ns1__processAssetFromBytes * SOAP_FMAC4 soap_in_ns1__processAssetFromBytes(struct soap*, const char*, ns1__processAssetFromBytes *, const char*);
SOAP_FMAC1 ns1__processAssetFromBytes * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromBytes(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processAssetFromBytes * soap_new_ns1__processAssetFromBytes(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processAssetFromBytes(soap, n, NULL, NULL, NULL);
}

inline ns1__processAssetFromBytes * soap_new_req_ns1__processAssetFromBytes(
	struct soap *soap)
{
	ns1__processAssetFromBytes *_p = ::soap_new_ns1__processAssetFromBytes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__processAssetFromBytes * soap_new_set_ns1__processAssetFromBytes(
	struct soap *soap,
	std::string *arg0,
	xsd__base64Binary *arg1,
	std::string *arg2)
{
	ns1__processAssetFromBytes *_p = ::soap_new_ns1__processAssetFromBytes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processAssetFromBytes::arg0 = arg0;
		_p->ns1__processAssetFromBytes::arg1 = arg1;
		_p->ns1__processAssetFromBytes::arg2 = arg2;
	}
	return _p;
}

inline int soap_write_ns1__processAssetFromBytes(struct soap *soap, ns1__processAssetFromBytes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromBytes", p->soap_type() == SOAP_TYPE_ns1__processAssetFromBytes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processAssetFromBytes(struct soap *soap, const char *URL, ns1__processAssetFromBytes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromBytes", p->soap_type() == SOAP_TYPE_ns1__processAssetFromBytes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processAssetFromBytes(struct soap *soap, const char *URL, ns1__processAssetFromBytes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromBytes", p->soap_type() == SOAP_TYPE_ns1__processAssetFromBytes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processAssetFromBytes(struct soap *soap, const char *URL, ns1__processAssetFromBytes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromBytes", p->soap_type() == SOAP_TYPE_ns1__processAssetFromBytes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processAssetFromBytes * SOAP_FMAC4 soap_get_ns1__processAssetFromBytes(struct soap*, ns1__processAssetFromBytes *, const char*, const char*);

inline int soap_read_ns1__processAssetFromBytes(struct soap *soap, ns1__processAssetFromBytes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processAssetFromBytes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processAssetFromBytes(struct soap *soap, const char *URL, ns1__processAssetFromBytes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processAssetFromBytes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__processAssetFromBytes(struct soap *soap, ns1__processAssetFromBytes *p)
{
	if (::soap_read_ns1__processAssetFromBytes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getAuthTokenResponse_DEFINED
#define SOAP_TYPE_ns1__getAuthTokenResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAuthTokenResponse(struct soap*, const char*, int, const ns1__getAuthTokenResponse *, const char*);
SOAP_FMAC3 ns1__getAuthTokenResponse * SOAP_FMAC4 soap_in_ns1__getAuthTokenResponse(struct soap*, const char*, ns1__getAuthTokenResponse *, const char*);
SOAP_FMAC1 ns1__getAuthTokenResponse * SOAP_FMAC2 soap_instantiate_ns1__getAuthTokenResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getAuthTokenResponse * soap_new_ns1__getAuthTokenResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getAuthTokenResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getAuthTokenResponse * soap_new_req_ns1__getAuthTokenResponse(
	struct soap *soap)
{
	ns1__getAuthTokenResponse *_p = ::soap_new_ns1__getAuthTokenResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getAuthTokenResponse * soap_new_set_ns1__getAuthTokenResponse(
	struct soap *soap,
	std::string *return_)
{
	ns1__getAuthTokenResponse *_p = ::soap_new_ns1__getAuthTokenResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getAuthTokenResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getAuthTokenResponse(struct soap *soap, ns1__getAuthTokenResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAuthTokenResponse", p->soap_type() == SOAP_TYPE_ns1__getAuthTokenResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getAuthTokenResponse(struct soap *soap, const char *URL, ns1__getAuthTokenResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAuthTokenResponse", p->soap_type() == SOAP_TYPE_ns1__getAuthTokenResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getAuthTokenResponse(struct soap *soap, const char *URL, ns1__getAuthTokenResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAuthTokenResponse", p->soap_type() == SOAP_TYPE_ns1__getAuthTokenResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getAuthTokenResponse(struct soap *soap, const char *URL, ns1__getAuthTokenResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAuthTokenResponse", p->soap_type() == SOAP_TYPE_ns1__getAuthTokenResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getAuthTokenResponse * SOAP_FMAC4 soap_get_ns1__getAuthTokenResponse(struct soap*, ns1__getAuthTokenResponse *, const char*, const char*);

inline int soap_read_ns1__getAuthTokenResponse(struct soap *soap, ns1__getAuthTokenResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getAuthTokenResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getAuthTokenResponse(struct soap *soap, const char *URL, ns1__getAuthTokenResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getAuthTokenResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getAuthTokenResponse(struct soap *soap, ns1__getAuthTokenResponse *p)
{
	if (::soap_read_ns1__getAuthTokenResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getAuthToken_DEFINED
#define SOAP_TYPE_ns1__getAuthToken_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAuthToken(struct soap*, const char*, int, const ns1__getAuthToken *, const char*);
SOAP_FMAC3 ns1__getAuthToken * SOAP_FMAC4 soap_in_ns1__getAuthToken(struct soap*, const char*, ns1__getAuthToken *, const char*);
SOAP_FMAC1 ns1__getAuthToken * SOAP_FMAC2 soap_instantiate_ns1__getAuthToken(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getAuthToken * soap_new_ns1__getAuthToken(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getAuthToken(soap, n, NULL, NULL, NULL);
}

inline ns1__getAuthToken * soap_new_req_ns1__getAuthToken(
	struct soap *soap)
{
	ns1__getAuthToken *_p = ::soap_new_ns1__getAuthToken(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getAuthToken * soap_new_set_ns1__getAuthToken(
	struct soap *soap,
	std::string *arg0)
{
	ns1__getAuthToken *_p = ::soap_new_ns1__getAuthToken(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getAuthToken::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_ns1__getAuthToken(struct soap *soap, ns1__getAuthToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAuthToken", p->soap_type() == SOAP_TYPE_ns1__getAuthToken ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getAuthToken(struct soap *soap, const char *URL, ns1__getAuthToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAuthToken", p->soap_type() == SOAP_TYPE_ns1__getAuthToken ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getAuthToken(struct soap *soap, const char *URL, ns1__getAuthToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAuthToken", p->soap_type() == SOAP_TYPE_ns1__getAuthToken ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getAuthToken(struct soap *soap, const char *URL, ns1__getAuthToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAuthToken", p->soap_type() == SOAP_TYPE_ns1__getAuthToken ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getAuthToken * SOAP_FMAC4 soap_get_ns1__getAuthToken(struct soap*, ns1__getAuthToken *, const char*, const char*);

inline int soap_read_ns1__getAuthToken(struct soap *soap, ns1__getAuthToken *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getAuthToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getAuthToken(struct soap *soap, const char *URL, ns1__getAuthToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getAuthToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getAuthToken(struct soap *soap, ns1__getAuthToken *p)
{
	if (::soap_read_ns1__getAuthToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getRecommendedAssetsResponse_DEFINED
#define SOAP_TYPE_ns1__getRecommendedAssetsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRecommendedAssetsResponse(struct soap*, const char*, int, const ns1__getRecommendedAssetsResponse *, const char*);
SOAP_FMAC3 ns1__getRecommendedAssetsResponse * SOAP_FMAC4 soap_in_ns1__getRecommendedAssetsResponse(struct soap*, const char*, ns1__getRecommendedAssetsResponse *, const char*);
SOAP_FMAC1 ns1__getRecommendedAssetsResponse * SOAP_FMAC2 soap_instantiate_ns1__getRecommendedAssetsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getRecommendedAssetsResponse * soap_new_ns1__getRecommendedAssetsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getRecommendedAssetsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getRecommendedAssetsResponse * soap_new_req_ns1__getRecommendedAssetsResponse(
	struct soap *soap)
{
	ns1__getRecommendedAssetsResponse *_p = ::soap_new_ns1__getRecommendedAssetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getRecommendedAssetsResponse * soap_new_set_ns1__getRecommendedAssetsResponse(
	struct soap *soap,
	const std::vector<ns1__mmfg *> & return_)
{
	ns1__getRecommendedAssetsResponse *_p = ::soap_new_ns1__getRecommendedAssetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getRecommendedAssetsResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getRecommendedAssetsResponse(struct soap *soap, ns1__getRecommendedAssetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRecommendedAssetsResponse", p->soap_type() == SOAP_TYPE_ns1__getRecommendedAssetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getRecommendedAssetsResponse(struct soap *soap, const char *URL, ns1__getRecommendedAssetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRecommendedAssetsResponse", p->soap_type() == SOAP_TYPE_ns1__getRecommendedAssetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getRecommendedAssetsResponse(struct soap *soap, const char *URL, ns1__getRecommendedAssetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRecommendedAssetsResponse", p->soap_type() == SOAP_TYPE_ns1__getRecommendedAssetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getRecommendedAssetsResponse(struct soap *soap, const char *URL, ns1__getRecommendedAssetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRecommendedAssetsResponse", p->soap_type() == SOAP_TYPE_ns1__getRecommendedAssetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getRecommendedAssetsResponse * SOAP_FMAC4 soap_get_ns1__getRecommendedAssetsResponse(struct soap*, ns1__getRecommendedAssetsResponse *, const char*, const char*);

inline int soap_read_ns1__getRecommendedAssetsResponse(struct soap *soap, ns1__getRecommendedAssetsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getRecommendedAssetsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getRecommendedAssetsResponse(struct soap *soap, const char *URL, ns1__getRecommendedAssetsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getRecommendedAssetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getRecommendedAssetsResponse(struct soap *soap, ns1__getRecommendedAssetsResponse *p)
{
	if (::soap_read_ns1__getRecommendedAssetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getRecommendedAssets_DEFINED
#define SOAP_TYPE_ns1__getRecommendedAssets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRecommendedAssets(struct soap*, const char*, int, const ns1__getRecommendedAssets *, const char*);
SOAP_FMAC3 ns1__getRecommendedAssets * SOAP_FMAC4 soap_in_ns1__getRecommendedAssets(struct soap*, const char*, ns1__getRecommendedAssets *, const char*);
SOAP_FMAC1 ns1__getRecommendedAssets * SOAP_FMAC2 soap_instantiate_ns1__getRecommendedAssets(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getRecommendedAssets * soap_new_ns1__getRecommendedAssets(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getRecommendedAssets(soap, n, NULL, NULL, NULL);
}

inline ns1__getRecommendedAssets * soap_new_req_ns1__getRecommendedAssets(
	struct soap *soap)
{
	ns1__getRecommendedAssets *_p = ::soap_new_ns1__getRecommendedAssets(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getRecommendedAssets * soap_new_set_ns1__getRecommendedAssets(
	struct soap *soap,
	std::string *arg0,
	ns1__graphCode *arg1)
{
	ns1__getRecommendedAssets *_p = ::soap_new_ns1__getRecommendedAssets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getRecommendedAssets::arg0 = arg0;
		_p->ns1__getRecommendedAssets::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__getRecommendedAssets(struct soap *soap, ns1__getRecommendedAssets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRecommendedAssets", p->soap_type() == SOAP_TYPE_ns1__getRecommendedAssets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getRecommendedAssets(struct soap *soap, const char *URL, ns1__getRecommendedAssets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRecommendedAssets", p->soap_type() == SOAP_TYPE_ns1__getRecommendedAssets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getRecommendedAssets(struct soap *soap, const char *URL, ns1__getRecommendedAssets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRecommendedAssets", p->soap_type() == SOAP_TYPE_ns1__getRecommendedAssets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getRecommendedAssets(struct soap *soap, const char *URL, ns1__getRecommendedAssets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRecommendedAssets", p->soap_type() == SOAP_TYPE_ns1__getRecommendedAssets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getRecommendedAssets * SOAP_FMAC4 soap_get_ns1__getRecommendedAssets(struct soap*, ns1__getRecommendedAssets *, const char*, const char*);

inline int soap_read_ns1__getRecommendedAssets(struct soap *soap, ns1__getRecommendedAssets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getRecommendedAssets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getRecommendedAssets(struct soap *soap, const char *URL, ns1__getRecommendedAssets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getRecommendedAssets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getRecommendedAssets(struct soap *soap, ns1__getRecommendedAssets *p)
{
	if (::soap_read_ns1__getRecommendedAssets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getSimilarAssetsResponse_DEFINED
#define SOAP_TYPE_ns1__getSimilarAssetsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getSimilarAssetsResponse(struct soap*, const char*, int, const ns1__getSimilarAssetsResponse *, const char*);
SOAP_FMAC3 ns1__getSimilarAssetsResponse * SOAP_FMAC4 soap_in_ns1__getSimilarAssetsResponse(struct soap*, const char*, ns1__getSimilarAssetsResponse *, const char*);
SOAP_FMAC1 ns1__getSimilarAssetsResponse * SOAP_FMAC2 soap_instantiate_ns1__getSimilarAssetsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getSimilarAssetsResponse * soap_new_ns1__getSimilarAssetsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getSimilarAssetsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getSimilarAssetsResponse * soap_new_req_ns1__getSimilarAssetsResponse(
	struct soap *soap)
{
	ns1__getSimilarAssetsResponse *_p = ::soap_new_ns1__getSimilarAssetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getSimilarAssetsResponse * soap_new_set_ns1__getSimilarAssetsResponse(
	struct soap *soap,
	const std::vector<ns1__mmfg *> & return_)
{
	ns1__getSimilarAssetsResponse *_p = ::soap_new_ns1__getSimilarAssetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getSimilarAssetsResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getSimilarAssetsResponse(struct soap *soap, ns1__getSimilarAssetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSimilarAssetsResponse", p->soap_type() == SOAP_TYPE_ns1__getSimilarAssetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getSimilarAssetsResponse(struct soap *soap, const char *URL, ns1__getSimilarAssetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSimilarAssetsResponse", p->soap_type() == SOAP_TYPE_ns1__getSimilarAssetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getSimilarAssetsResponse(struct soap *soap, const char *URL, ns1__getSimilarAssetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSimilarAssetsResponse", p->soap_type() == SOAP_TYPE_ns1__getSimilarAssetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getSimilarAssetsResponse(struct soap *soap, const char *URL, ns1__getSimilarAssetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSimilarAssetsResponse", p->soap_type() == SOAP_TYPE_ns1__getSimilarAssetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getSimilarAssetsResponse * SOAP_FMAC4 soap_get_ns1__getSimilarAssetsResponse(struct soap*, ns1__getSimilarAssetsResponse *, const char*, const char*);

inline int soap_read_ns1__getSimilarAssetsResponse(struct soap *soap, ns1__getSimilarAssetsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getSimilarAssetsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getSimilarAssetsResponse(struct soap *soap, const char *URL, ns1__getSimilarAssetsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getSimilarAssetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getSimilarAssetsResponse(struct soap *soap, ns1__getSimilarAssetsResponse *p)
{
	if (::soap_read_ns1__getSimilarAssetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getSimilarAssets_DEFINED
#define SOAP_TYPE_ns1__getSimilarAssets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getSimilarAssets(struct soap*, const char*, int, const ns1__getSimilarAssets *, const char*);
SOAP_FMAC3 ns1__getSimilarAssets * SOAP_FMAC4 soap_in_ns1__getSimilarAssets(struct soap*, const char*, ns1__getSimilarAssets *, const char*);
SOAP_FMAC1 ns1__getSimilarAssets * SOAP_FMAC2 soap_instantiate_ns1__getSimilarAssets(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getSimilarAssets * soap_new_ns1__getSimilarAssets(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getSimilarAssets(soap, n, NULL, NULL, NULL);
}

inline ns1__getSimilarAssets * soap_new_req_ns1__getSimilarAssets(
	struct soap *soap)
{
	ns1__getSimilarAssets *_p = ::soap_new_ns1__getSimilarAssets(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getSimilarAssets * soap_new_set_ns1__getSimilarAssets(
	struct soap *soap,
	std::string *arg0,
	ns1__graphCode *arg1)
{
	ns1__getSimilarAssets *_p = ::soap_new_ns1__getSimilarAssets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getSimilarAssets::arg0 = arg0;
		_p->ns1__getSimilarAssets::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__getSimilarAssets(struct soap *soap, ns1__getSimilarAssets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSimilarAssets", p->soap_type() == SOAP_TYPE_ns1__getSimilarAssets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getSimilarAssets(struct soap *soap, const char *URL, ns1__getSimilarAssets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSimilarAssets", p->soap_type() == SOAP_TYPE_ns1__getSimilarAssets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getSimilarAssets(struct soap *soap, const char *URL, ns1__getSimilarAssets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSimilarAssets", p->soap_type() == SOAP_TYPE_ns1__getSimilarAssets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getSimilarAssets(struct soap *soap, const char *URL, ns1__getSimilarAssets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSimilarAssets", p->soap_type() == SOAP_TYPE_ns1__getSimilarAssets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getSimilarAssets * SOAP_FMAC4 soap_get_ns1__getSimilarAssets(struct soap*, ns1__getSimilarAssets *, const char*, const char*);

inline int soap_read_ns1__getSimilarAssets(struct soap *soap, ns1__getSimilarAssets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getSimilarAssets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getSimilarAssets(struct soap *soap, const char *URL, ns1__getSimilarAssets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getSimilarAssets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getSimilarAssets(struct soap *soap, ns1__getSimilarAssets *p)
{
	if (::soap_read_ns1__getSimilarAssets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__graphCode_DEFINED
#define SOAP_TYPE_ns1__graphCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__graphCode(struct soap*, const char*, int, const ns1__graphCode *, const char*);
SOAP_FMAC3 ns1__graphCode * SOAP_FMAC4 soap_in_ns1__graphCode(struct soap*, const char*, ns1__graphCode *, const char*);
SOAP_FMAC1 ns1__graphCode * SOAP_FMAC2 soap_instantiate_ns1__graphCode(struct soap*, int, const char*, const char*, size_t*);

inline ns1__graphCode * soap_new_ns1__graphCode(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__graphCode(soap, n, NULL, NULL, NULL);
}

inline ns1__graphCode * soap_new_req_ns1__graphCode(
	struct soap *soap)
{
	ns1__graphCode *_p = ::soap_new_ns1__graphCode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__graphCode * soap_new_set_ns1__graphCode(
	struct soap *soap,
	const std::vector<std::string> & dictionary)
{
	ns1__graphCode *_p = ::soap_new_ns1__graphCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__graphCode::dictionary = dictionary;
	}
	return _p;
}

inline int soap_write_ns1__graphCode(struct soap *soap, ns1__graphCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:graphCode", p->soap_type() == SOAP_TYPE_ns1__graphCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__graphCode(struct soap *soap, const char *URL, ns1__graphCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:graphCode", p->soap_type() == SOAP_TYPE_ns1__graphCode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__graphCode(struct soap *soap, const char *URL, ns1__graphCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:graphCode", p->soap_type() == SOAP_TYPE_ns1__graphCode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__graphCode(struct soap *soap, const char *URL, ns1__graphCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:graphCode", p->soap_type() == SOAP_TYPE_ns1__graphCode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__graphCode * SOAP_FMAC4 soap_get_ns1__graphCode(struct soap*, ns1__graphCode *, const char*, const char*);

inline int soap_read_ns1__graphCode(struct soap *soap, ns1__graphCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__graphCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__graphCode(struct soap *soap, const char *URL, ns1__graphCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__graphCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__graphCode(struct soap *soap, ns1__graphCode *p)
{
	if (::soap_read_ns1__graphCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse_DEFINED
#define SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getOrGenerateGraphCodeResponse(struct soap*, const char*, int, const ns1__getOrGenerateGraphCodeResponse *, const char*);
SOAP_FMAC3 ns1__getOrGenerateGraphCodeResponse * SOAP_FMAC4 soap_in_ns1__getOrGenerateGraphCodeResponse(struct soap*, const char*, ns1__getOrGenerateGraphCodeResponse *, const char*);
SOAP_FMAC1 ns1__getOrGenerateGraphCodeResponse * SOAP_FMAC2 soap_instantiate_ns1__getOrGenerateGraphCodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getOrGenerateGraphCodeResponse * soap_new_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getOrGenerateGraphCodeResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getOrGenerateGraphCodeResponse * soap_new_req_ns1__getOrGenerateGraphCodeResponse(
	struct soap *soap)
{
	ns1__getOrGenerateGraphCodeResponse *_p = ::soap_new_ns1__getOrGenerateGraphCodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getOrGenerateGraphCodeResponse * soap_new_set_ns1__getOrGenerateGraphCodeResponse(
	struct soap *soap,
	ns1__graphCode *return_)
{
	ns1__getOrGenerateGraphCodeResponse *_p = ::soap_new_ns1__getOrGenerateGraphCodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getOrGenerateGraphCodeResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, ns1__getOrGenerateGraphCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getOrGenerateGraphCodeResponse", p->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, const char *URL, ns1__getOrGenerateGraphCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getOrGenerateGraphCodeResponse", p->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, const char *URL, ns1__getOrGenerateGraphCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getOrGenerateGraphCodeResponse", p->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, const char *URL, ns1__getOrGenerateGraphCodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getOrGenerateGraphCodeResponse", p->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getOrGenerateGraphCodeResponse * SOAP_FMAC4 soap_get_ns1__getOrGenerateGraphCodeResponse(struct soap*, ns1__getOrGenerateGraphCodeResponse *, const char*, const char*);

inline int soap_read_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, ns1__getOrGenerateGraphCodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getOrGenerateGraphCodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, const char *URL, ns1__getOrGenerateGraphCodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getOrGenerateGraphCodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, ns1__getOrGenerateGraphCodeResponse *p)
{
	if (::soap_read_ns1__getOrGenerateGraphCodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__getOrGenerateGraphCode_DEFINED
#define SOAP_TYPE_ns1__getOrGenerateGraphCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getOrGenerateGraphCode(struct soap*, const char*, int, const ns1__getOrGenerateGraphCode *, const char*);
SOAP_FMAC3 ns1__getOrGenerateGraphCode * SOAP_FMAC4 soap_in_ns1__getOrGenerateGraphCode(struct soap*, const char*, ns1__getOrGenerateGraphCode *, const char*);
SOAP_FMAC1 ns1__getOrGenerateGraphCode * SOAP_FMAC2 soap_instantiate_ns1__getOrGenerateGraphCode(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getOrGenerateGraphCode * soap_new_ns1__getOrGenerateGraphCode(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getOrGenerateGraphCode(soap, n, NULL, NULL, NULL);
}

inline ns1__getOrGenerateGraphCode * soap_new_req_ns1__getOrGenerateGraphCode(
	struct soap *soap)
{
	ns1__getOrGenerateGraphCode *_p = ::soap_new_ns1__getOrGenerateGraphCode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getOrGenerateGraphCode * soap_new_set_ns1__getOrGenerateGraphCode(
	struct soap *soap,
	std::string *arg0,
	ns1__mmfg *arg1)
{
	ns1__getOrGenerateGraphCode *_p = ::soap_new_ns1__getOrGenerateGraphCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getOrGenerateGraphCode::arg0 = arg0;
		_p->ns1__getOrGenerateGraphCode::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__getOrGenerateGraphCode(struct soap *soap, ns1__getOrGenerateGraphCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getOrGenerateGraphCode", p->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getOrGenerateGraphCode(struct soap *soap, const char *URL, ns1__getOrGenerateGraphCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getOrGenerateGraphCode", p->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__getOrGenerateGraphCode(struct soap *soap, const char *URL, ns1__getOrGenerateGraphCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getOrGenerateGraphCode", p->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getOrGenerateGraphCode(struct soap *soap, const char *URL, ns1__getOrGenerateGraphCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getOrGenerateGraphCode", p->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getOrGenerateGraphCode * SOAP_FMAC4 soap_get_ns1__getOrGenerateGraphCode(struct soap*, ns1__getOrGenerateGraphCode *, const char*, const char*);

inline int soap_read_ns1__getOrGenerateGraphCode(struct soap *soap, ns1__getOrGenerateGraphCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getOrGenerateGraphCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getOrGenerateGraphCode(struct soap *soap, const char *URL, ns1__getOrGenerateGraphCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getOrGenerateGraphCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__getOrGenerateGraphCode(struct soap *soap, ns1__getOrGenerateGraphCode *p)
{
	if (::soap_read_ns1__getOrGenerateGraphCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__security_DEFINED
#define SOAP_TYPE_ns1__security_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__security(struct soap*, const char*, int, const ns1__security *, const char*);
SOAP_FMAC3 ns1__security * SOAP_FMAC4 soap_in_ns1__security(struct soap*, const char*, ns1__security *, const char*);
SOAP_FMAC1 ns1__security * SOAP_FMAC2 soap_instantiate_ns1__security(struct soap*, int, const char*, const char*, size_t*);

inline ns1__security * soap_new_ns1__security(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__security(soap, n, NULL, NULL, NULL);
}

inline ns1__security * soap_new_req_ns1__security(
	struct soap *soap)
{
	ns1__security *_p = ::soap_new_ns1__security(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__security * soap_new_set_ns1__security(
	struct soap *soap,
	std::string *acl,
	std::string *group_USCOREid,
	std::string *owner_USCOREid)
{
	ns1__security *_p = ::soap_new_ns1__security(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__security::acl = acl;
		_p->ns1__security::group_USCOREid = group_USCOREid;
		_p->ns1__security::owner_USCOREid = owner_USCOREid;
	}
	return _p;
}

inline int soap_write_ns1__security(struct soap *soap, ns1__security const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:security", p->soap_type() == SOAP_TYPE_ns1__security ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__security(struct soap *soap, const char *URL, ns1__security const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:security", p->soap_type() == SOAP_TYPE_ns1__security ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__security(struct soap *soap, const char *URL, ns1__security const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:security", p->soap_type() == SOAP_TYPE_ns1__security ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__security(struct soap *soap, const char *URL, ns1__security const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:security", p->soap_type() == SOAP_TYPE_ns1__security ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__security * SOAP_FMAC4 soap_get_ns1__security(struct soap*, ns1__security *, const char*, const char*);

inline int soap_read_ns1__security(struct soap *soap, ns1__security *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__security(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__security(struct soap *soap, const char *URL, ns1__security *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__security(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__security(struct soap *soap, ns1__security *p)
{
	if (::soap_read_ns1__security(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__generalMetadata_DEFINED
#define SOAP_TYPE_ns1__generalMetadata_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__generalMetadata(struct soap*, const char*, int, const ns1__generalMetadata *, const char*);
SOAP_FMAC3 ns1__generalMetadata * SOAP_FMAC4 soap_in_ns1__generalMetadata(struct soap*, const char*, ns1__generalMetadata *, const char*);
SOAP_FMAC1 ns1__generalMetadata * SOAP_FMAC2 soap_instantiate_ns1__generalMetadata(struct soap*, int, const char*, const char*, size_t*);

inline ns1__generalMetadata * soap_new_ns1__generalMetadata(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__generalMetadata(soap, n, NULL, NULL, NULL);
}

inline ns1__generalMetadata * soap_new_req_ns1__generalMetadata(
	struct soap *soap,
	float aperture,
	float exposure,
	LONG64 fileSize,
	LONG64 focalLength,
	int height,
	int iso,
	LONG64 latitude,
	LONG64 longitude,
	int resolution,
	LONG64 shutterSpeed,
	int width)
{
	ns1__generalMetadata *_p = ::soap_new_ns1__generalMetadata(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__generalMetadata::aperture = aperture;
		_p->ns1__generalMetadata::exposure = exposure;
		_p->ns1__generalMetadata::fileSize = fileSize;
		_p->ns1__generalMetadata::focalLength = focalLength;
		_p->ns1__generalMetadata::height = height;
		_p->ns1__generalMetadata::iso = iso;
		_p->ns1__generalMetadata::latitude = latitude;
		_p->ns1__generalMetadata::longitude = longitude;
		_p->ns1__generalMetadata::resolution = resolution;
		_p->ns1__generalMetadata::shutterSpeed = shutterSpeed;
		_p->ns1__generalMetadata::width = width;
	}
	return _p;
}

inline ns1__generalMetadata * soap_new_set_ns1__generalMetadata(
	struct soap *soap,
	float aperture,
	std::string *cameraModel,
	std::string *cityNearBy,
	time_t *date,
	float exposure,
	std::string *fileName,
	std::string *fileReference,
	LONG64 fileSize,
	LONG64 focalLength,
	int height,
	std::string *id,
	int iso,
	LONG64 latitude,
	std::string *lensModel,
	LONG64 longitude,
	int resolution,
	LONG64 shutterSpeed,
	int width)
{
	ns1__generalMetadata *_p = ::soap_new_ns1__generalMetadata(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__generalMetadata::aperture = aperture;
		_p->ns1__generalMetadata::cameraModel = cameraModel;
		_p->ns1__generalMetadata::cityNearBy = cityNearBy;
		_p->ns1__generalMetadata::date = date;
		_p->ns1__generalMetadata::exposure = exposure;
		_p->ns1__generalMetadata::fileName = fileName;
		_p->ns1__generalMetadata::fileReference = fileReference;
		_p->ns1__generalMetadata::fileSize = fileSize;
		_p->ns1__generalMetadata::focalLength = focalLength;
		_p->ns1__generalMetadata::height = height;
		_p->ns1__generalMetadata::id = id;
		_p->ns1__generalMetadata::iso = iso;
		_p->ns1__generalMetadata::latitude = latitude;
		_p->ns1__generalMetadata::lensModel = lensModel;
		_p->ns1__generalMetadata::longitude = longitude;
		_p->ns1__generalMetadata::resolution = resolution;
		_p->ns1__generalMetadata::shutterSpeed = shutterSpeed;
		_p->ns1__generalMetadata::width = width;
	}
	return _p;
}

inline int soap_write_ns1__generalMetadata(struct soap *soap, ns1__generalMetadata const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:generalMetadata", p->soap_type() == SOAP_TYPE_ns1__generalMetadata ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__generalMetadata(struct soap *soap, const char *URL, ns1__generalMetadata const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:generalMetadata", p->soap_type() == SOAP_TYPE_ns1__generalMetadata ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__generalMetadata(struct soap *soap, const char *URL, ns1__generalMetadata const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:generalMetadata", p->soap_type() == SOAP_TYPE_ns1__generalMetadata ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__generalMetadata(struct soap *soap, const char *URL, ns1__generalMetadata const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:generalMetadata", p->soap_type() == SOAP_TYPE_ns1__generalMetadata ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__generalMetadata * SOAP_FMAC4 soap_get_ns1__generalMetadata(struct soap*, ns1__generalMetadata *, const char*, const char*);

inline int soap_read_ns1__generalMetadata(struct soap *soap, ns1__generalMetadata *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__generalMetadata(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__generalMetadata(struct soap *soap, const char *URL, ns1__generalMetadata *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__generalMetadata(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__generalMetadata(struct soap *soap, ns1__generalMetadata *p)
{
	if (::soap_read_ns1__generalMetadata(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__node_DEFINED
#define SOAP_TYPE_ns1__node_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__node(struct soap*, const char*, int, const ns1__node *, const char*);
SOAP_FMAC3 ns1__node * SOAP_FMAC4 soap_in_ns1__node(struct soap*, const char*, ns1__node *, const char*);
SOAP_FMAC1 ns1__node * SOAP_FMAC2 soap_instantiate_ns1__node(struct soap*, int, const char*, const char*, size_t*);

inline ns1__node * soap_new_ns1__node(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__node(soap, n, NULL, NULL, NULL);
}

inline ns1__node * soap_new_req_ns1__node(
	struct soap *soap)
{
	ns1__node *_p = ::soap_new_ns1__node(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__node * soap_new_set_ns1__node(
	struct soap *soap,
	std::string *detectedBy,
	std::string *name)
{
	ns1__node *_p = ::soap_new_ns1__node(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__node::detectedBy = detectedBy;
		_p->ns1__node::name = name;
	}
	return _p;
}

inline int soap_write_ns1__node(struct soap *soap, ns1__node const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:node", p->soap_type() == SOAP_TYPE_ns1__node ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__node(struct soap *soap, const char *URL, ns1__node const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:node", p->soap_type() == SOAP_TYPE_ns1__node ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__node(struct soap *soap, const char *URL, ns1__node const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:node", p->soap_type() == SOAP_TYPE_ns1__node ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__node(struct soap *soap, const char *URL, ns1__node const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:node", p->soap_type() == SOAP_TYPE_ns1__node ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__node * SOAP_FMAC4 soap_get_ns1__node(struct soap*, ns1__node *, const char*, const char*);

inline int soap_read_ns1__node(struct soap *soap, ns1__node *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__node(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__node(struct soap *soap, const char *URL, ns1__node *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__node(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__node(struct soap *soap, ns1__node *p)
{
	if (::soap_read_ns1__node(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__mmfg_DEFINED
#define SOAP_TYPE_ns1__mmfg_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__mmfg(struct soap*, const char*, int, const ns1__mmfg *, const char*);
SOAP_FMAC3 ns1__mmfg * SOAP_FMAC4 soap_in_ns1__mmfg(struct soap*, const char*, ns1__mmfg *, const char*);
SOAP_FMAC1 ns1__mmfg * SOAP_FMAC2 soap_instantiate_ns1__mmfg(struct soap*, int, const char*, const char*, size_t*);

inline ns1__mmfg * soap_new_ns1__mmfg(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__mmfg(soap, n, NULL, NULL, NULL);
}

inline ns1__mmfg * soap_new_req_ns1__mmfg(
	struct soap *soap)
{
	ns1__mmfg *_p = ::soap_new_ns1__mmfg(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__mmfg * soap_new_set_ns1__mmfg(
	struct soap *soap,
	const std::vector<ns1__node *> & allNodes,
	ns1__node *currentNode,
	ns1__generalMetadata *generalMetadata,
	ns1__security *security,
	const std::vector<float> & similarity,
	const std::vector<float> & tempSimilarity)
{
	ns1__mmfg *_p = ::soap_new_ns1__mmfg(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__mmfg::allNodes = allNodes;
		_p->ns1__mmfg::currentNode = currentNode;
		_p->ns1__mmfg::generalMetadata = generalMetadata;
		_p->ns1__mmfg::security = security;
		_p->ns1__mmfg::similarity = similarity;
		_p->ns1__mmfg::tempSimilarity = tempSimilarity;
	}
	return _p;
}

inline int soap_write_ns1__mmfg(struct soap *soap, ns1__mmfg const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:mmfg", p->soap_type() == SOAP_TYPE_ns1__mmfg ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__mmfg(struct soap *soap, const char *URL, ns1__mmfg const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:mmfg", p->soap_type() == SOAP_TYPE_ns1__mmfg ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__mmfg(struct soap *soap, const char *URL, ns1__mmfg const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:mmfg", p->soap_type() == SOAP_TYPE_ns1__mmfg ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__mmfg(struct soap *soap, const char *URL, ns1__mmfg const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:mmfg", p->soap_type() == SOAP_TYPE_ns1__mmfg ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__mmfg * SOAP_FMAC4 soap_get_ns1__mmfg(struct soap*, ns1__mmfg *, const char*, const char*);

inline int soap_read_ns1__mmfg(struct soap *soap, ns1__mmfg *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__mmfg(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__mmfg(struct soap *soap, const char *URL, ns1__mmfg *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__mmfg(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__mmfg(struct soap *soap, ns1__mmfg *p)
{
	if (::soap_read_ns1__mmfg(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__processAssetFromURLResponse_DEFINED
#define SOAP_TYPE_ns1__processAssetFromURLResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromURLResponse(struct soap*, const char*, int, const ns1__processAssetFromURLResponse *, const char*);
SOAP_FMAC3 ns1__processAssetFromURLResponse * SOAP_FMAC4 soap_in_ns1__processAssetFromURLResponse(struct soap*, const char*, ns1__processAssetFromURLResponse *, const char*);
SOAP_FMAC1 ns1__processAssetFromURLResponse * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromURLResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processAssetFromURLResponse * soap_new_ns1__processAssetFromURLResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processAssetFromURLResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__processAssetFromURLResponse * soap_new_req_ns1__processAssetFromURLResponse(
	struct soap *soap)
{
	ns1__processAssetFromURLResponse *_p = ::soap_new_ns1__processAssetFromURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__processAssetFromURLResponse * soap_new_set_ns1__processAssetFromURLResponse(
	struct soap *soap,
	ns1__mmfg *return_)
{
	ns1__processAssetFromURLResponse *_p = ::soap_new_ns1__processAssetFromURLResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processAssetFromURLResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_ns1__processAssetFromURLResponse(struct soap *soap, ns1__processAssetFromURLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromURLResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromURLResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processAssetFromURLResponse(struct soap *soap, const char *URL, ns1__processAssetFromURLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromURLResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromURLResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processAssetFromURLResponse(struct soap *soap, const char *URL, ns1__processAssetFromURLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromURLResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromURLResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processAssetFromURLResponse(struct soap *soap, const char *URL, ns1__processAssetFromURLResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromURLResponse", p->soap_type() == SOAP_TYPE_ns1__processAssetFromURLResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processAssetFromURLResponse * SOAP_FMAC4 soap_get_ns1__processAssetFromURLResponse(struct soap*, ns1__processAssetFromURLResponse *, const char*, const char*);

inline int soap_read_ns1__processAssetFromURLResponse(struct soap *soap, ns1__processAssetFromURLResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processAssetFromURLResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processAssetFromURLResponse(struct soap *soap, const char *URL, ns1__processAssetFromURLResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processAssetFromURLResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__processAssetFromURLResponse(struct soap *soap, ns1__processAssetFromURLResponse *p)
{
	if (::soap_read_ns1__processAssetFromURLResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__processAssetFromURL_DEFINED
#define SOAP_TYPE_ns1__processAssetFromURL_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromURL(struct soap*, const char*, int, const ns1__processAssetFromURL *, const char*);
SOAP_FMAC3 ns1__processAssetFromURL * SOAP_FMAC4 soap_in_ns1__processAssetFromURL(struct soap*, const char*, ns1__processAssetFromURL *, const char*);
SOAP_FMAC1 ns1__processAssetFromURL * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromURL(struct soap*, int, const char*, const char*, size_t*);

inline ns1__processAssetFromURL * soap_new_ns1__processAssetFromURL(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__processAssetFromURL(soap, n, NULL, NULL, NULL);
}

inline ns1__processAssetFromURL * soap_new_req_ns1__processAssetFromURL(
	struct soap *soap)
{
	ns1__processAssetFromURL *_p = ::soap_new_ns1__processAssetFromURL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__processAssetFromURL * soap_new_set_ns1__processAssetFromURL(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	ns1__processAssetFromURL *_p = ::soap_new_ns1__processAssetFromURL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__processAssetFromURL::arg0 = arg0;
		_p->ns1__processAssetFromURL::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_ns1__processAssetFromURL(struct soap *soap, ns1__processAssetFromURL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromURL", p->soap_type() == SOAP_TYPE_ns1__processAssetFromURL ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__processAssetFromURL(struct soap *soap, const char *URL, ns1__processAssetFromURL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromURL", p->soap_type() == SOAP_TYPE_ns1__processAssetFromURL ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__processAssetFromURL(struct soap *soap, const char *URL, ns1__processAssetFromURL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromURL", p->soap_type() == SOAP_TYPE_ns1__processAssetFromURL ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__processAssetFromURL(struct soap *soap, const char *URL, ns1__processAssetFromURL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:processAssetFromURL", p->soap_type() == SOAP_TYPE_ns1__processAssetFromURL ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__processAssetFromURL * SOAP_FMAC4 soap_get_ns1__processAssetFromURL(struct soap*, ns1__processAssetFromURL *, const char*, const char*);

inline int soap_read_ns1__processAssetFromURL(struct soap *soap, ns1__processAssetFromURL *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__processAssetFromURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__processAssetFromURL(struct soap *soap, const char *URL, ns1__processAssetFromURL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__processAssetFromURL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__processAssetFromURL(struct soap *soap, ns1__processAssetFromURL *p)
{
	if (::soap_read_ns1__processAssetFromURL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__getSimilarAssets_DEFINED
#define SOAP_TYPE___ns1__getSimilarAssets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSimilarAssets(struct soap*, struct __ns1__getSimilarAssets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSimilarAssets(struct soap*, const struct __ns1__getSimilarAssets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSimilarAssets(struct soap*, const char*, int, const struct __ns1__getSimilarAssets *, const char*);
SOAP_FMAC3 struct __ns1__getSimilarAssets * SOAP_FMAC4 soap_in___ns1__getSimilarAssets(struct soap*, const char*, struct __ns1__getSimilarAssets *, const char*);
SOAP_FMAC1 struct __ns1__getSimilarAssets * SOAP_FMAC2 soap_instantiate___ns1__getSimilarAssets(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSimilarAssets * soap_new___ns1__getSimilarAssets(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSimilarAssets(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSimilarAssets * soap_new_req___ns1__getSimilarAssets(
	struct soap *soap)
{
	struct __ns1__getSimilarAssets *_p = ::soap_new___ns1__getSimilarAssets(soap);
	if (_p)
	{	::soap_default___ns1__getSimilarAssets(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSimilarAssets * soap_new_set___ns1__getSimilarAssets(
	struct soap *soap,
	ns1__getSimilarAssets *ns1__getSimilarAssets_)
{
	struct __ns1__getSimilarAssets *_p = ::soap_new___ns1__getSimilarAssets(soap);
	if (_p)
	{	::soap_default___ns1__getSimilarAssets(soap, _p);
		_p->ns1__getSimilarAssets_ = ns1__getSimilarAssets_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSimilarAssets(struct soap*, const struct __ns1__getSimilarAssets *, const char*, const char*);

inline int soap_write___ns1__getSimilarAssets(struct soap *soap, struct __ns1__getSimilarAssets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSimilarAssets(soap, p), 0) || ::soap_put___ns1__getSimilarAssets(soap, p, "-ns1:getSimilarAssets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSimilarAssets(struct soap *soap, const char *URL, struct __ns1__getSimilarAssets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSimilarAssets(soap, p), 0) || ::soap_put___ns1__getSimilarAssets(soap, p, "-ns1:getSimilarAssets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getSimilarAssets(struct soap *soap, const char *URL, struct __ns1__getSimilarAssets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSimilarAssets(soap, p), 0) || ::soap_put___ns1__getSimilarAssets(soap, p, "-ns1:getSimilarAssets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSimilarAssets(struct soap *soap, const char *URL, struct __ns1__getSimilarAssets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSimilarAssets(soap, p), 0) || ::soap_put___ns1__getSimilarAssets(soap, p, "-ns1:getSimilarAssets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSimilarAssets * SOAP_FMAC4 soap_get___ns1__getSimilarAssets(struct soap*, struct __ns1__getSimilarAssets *, const char*, const char*);

inline int soap_read___ns1__getSimilarAssets(struct soap *soap, struct __ns1__getSimilarAssets *p)
{
	if (p)
	{	::soap_default___ns1__getSimilarAssets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSimilarAssets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSimilarAssets(struct soap *soap, const char *URL, struct __ns1__getSimilarAssets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSimilarAssets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getSimilarAssets(struct soap *soap, struct __ns1__getSimilarAssets *p)
{
	if (::soap_read___ns1__getSimilarAssets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getRecommendedAssets_DEFINED
#define SOAP_TYPE___ns1__getRecommendedAssets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRecommendedAssets(struct soap*, struct __ns1__getRecommendedAssets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRecommendedAssets(struct soap*, const struct __ns1__getRecommendedAssets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRecommendedAssets(struct soap*, const char*, int, const struct __ns1__getRecommendedAssets *, const char*);
SOAP_FMAC3 struct __ns1__getRecommendedAssets * SOAP_FMAC4 soap_in___ns1__getRecommendedAssets(struct soap*, const char*, struct __ns1__getRecommendedAssets *, const char*);
SOAP_FMAC1 struct __ns1__getRecommendedAssets * SOAP_FMAC2 soap_instantiate___ns1__getRecommendedAssets(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRecommendedAssets * soap_new___ns1__getRecommendedAssets(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRecommendedAssets(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRecommendedAssets * soap_new_req___ns1__getRecommendedAssets(
	struct soap *soap)
{
	struct __ns1__getRecommendedAssets *_p = ::soap_new___ns1__getRecommendedAssets(soap);
	if (_p)
	{	::soap_default___ns1__getRecommendedAssets(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRecommendedAssets * soap_new_set___ns1__getRecommendedAssets(
	struct soap *soap,
	ns1__getRecommendedAssets *ns1__getRecommendedAssets_)
{
	struct __ns1__getRecommendedAssets *_p = ::soap_new___ns1__getRecommendedAssets(soap);
	if (_p)
	{	::soap_default___ns1__getRecommendedAssets(soap, _p);
		_p->ns1__getRecommendedAssets_ = ns1__getRecommendedAssets_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRecommendedAssets(struct soap*, const struct __ns1__getRecommendedAssets *, const char*, const char*);

inline int soap_write___ns1__getRecommendedAssets(struct soap *soap, struct __ns1__getRecommendedAssets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getRecommendedAssets(soap, p), 0) || ::soap_put___ns1__getRecommendedAssets(soap, p, "-ns1:getRecommendedAssets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRecommendedAssets(struct soap *soap, const char *URL, struct __ns1__getRecommendedAssets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRecommendedAssets(soap, p), 0) || ::soap_put___ns1__getRecommendedAssets(soap, p, "-ns1:getRecommendedAssets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getRecommendedAssets(struct soap *soap, const char *URL, struct __ns1__getRecommendedAssets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRecommendedAssets(soap, p), 0) || ::soap_put___ns1__getRecommendedAssets(soap, p, "-ns1:getRecommendedAssets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRecommendedAssets(struct soap *soap, const char *URL, struct __ns1__getRecommendedAssets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRecommendedAssets(soap, p), 0) || ::soap_put___ns1__getRecommendedAssets(soap, p, "-ns1:getRecommendedAssets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRecommendedAssets * SOAP_FMAC4 soap_get___ns1__getRecommendedAssets(struct soap*, struct __ns1__getRecommendedAssets *, const char*, const char*);

inline int soap_read___ns1__getRecommendedAssets(struct soap *soap, struct __ns1__getRecommendedAssets *p)
{
	if (p)
	{	::soap_default___ns1__getRecommendedAssets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getRecommendedAssets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRecommendedAssets(struct soap *soap, const char *URL, struct __ns1__getRecommendedAssets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getRecommendedAssets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getRecommendedAssets(struct soap *soap, struct __ns1__getRecommendedAssets *p)
{
	if (::soap_read___ns1__getRecommendedAssets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__setProcessingPlugins_DEFINED
#define SOAP_TYPE___ns1__setProcessingPlugins_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setProcessingPlugins(struct soap*, struct __ns1__setProcessingPlugins *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setProcessingPlugins(struct soap*, const struct __ns1__setProcessingPlugins *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setProcessingPlugins(struct soap*, const char*, int, const struct __ns1__setProcessingPlugins *, const char*);
SOAP_FMAC3 struct __ns1__setProcessingPlugins * SOAP_FMAC4 soap_in___ns1__setProcessingPlugins(struct soap*, const char*, struct __ns1__setProcessingPlugins *, const char*);
SOAP_FMAC1 struct __ns1__setProcessingPlugins * SOAP_FMAC2 soap_instantiate___ns1__setProcessingPlugins(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setProcessingPlugins * soap_new___ns1__setProcessingPlugins(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__setProcessingPlugins(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__setProcessingPlugins * soap_new_req___ns1__setProcessingPlugins(
	struct soap *soap)
{
	struct __ns1__setProcessingPlugins *_p = ::soap_new___ns1__setProcessingPlugins(soap);
	if (_p)
	{	::soap_default___ns1__setProcessingPlugins(soap, _p);
	}
	return _p;
}

inline struct __ns1__setProcessingPlugins * soap_new_set___ns1__setProcessingPlugins(
	struct soap *soap,
	ns1__setProcessingPlugins *ns1__setProcessingPlugins_)
{
	struct __ns1__setProcessingPlugins *_p = ::soap_new___ns1__setProcessingPlugins(soap);
	if (_p)
	{	::soap_default___ns1__setProcessingPlugins(soap, _p);
		_p->ns1__setProcessingPlugins_ = ns1__setProcessingPlugins_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setProcessingPlugins(struct soap*, const struct __ns1__setProcessingPlugins *, const char*, const char*);

inline int soap_write___ns1__setProcessingPlugins(struct soap *soap, struct __ns1__setProcessingPlugins const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__setProcessingPlugins(soap, p), 0) || ::soap_put___ns1__setProcessingPlugins(soap, p, "-ns1:setProcessingPlugins", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__setProcessingPlugins(struct soap *soap, const char *URL, struct __ns1__setProcessingPlugins const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__setProcessingPlugins(soap, p), 0) || ::soap_put___ns1__setProcessingPlugins(soap, p, "-ns1:setProcessingPlugins", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__setProcessingPlugins(struct soap *soap, const char *URL, struct __ns1__setProcessingPlugins const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__setProcessingPlugins(soap, p), 0) || ::soap_put___ns1__setProcessingPlugins(soap, p, "-ns1:setProcessingPlugins", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__setProcessingPlugins(struct soap *soap, const char *URL, struct __ns1__setProcessingPlugins const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__setProcessingPlugins(soap, p), 0) || ::soap_put___ns1__setProcessingPlugins(soap, p, "-ns1:setProcessingPlugins", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__setProcessingPlugins * SOAP_FMAC4 soap_get___ns1__setProcessingPlugins(struct soap*, struct __ns1__setProcessingPlugins *, const char*, const char*);

inline int soap_read___ns1__setProcessingPlugins(struct soap *soap, struct __ns1__setProcessingPlugins *p)
{
	if (p)
	{	::soap_default___ns1__setProcessingPlugins(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__setProcessingPlugins(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__setProcessingPlugins(struct soap *soap, const char *URL, struct __ns1__setProcessingPlugins *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__setProcessingPlugins(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__setProcessingPlugins(struct soap *soap, struct __ns1__setProcessingPlugins *p)
{
	if (::soap_read___ns1__setProcessingPlugins(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getOrGenerateGraphCode_DEFINED
#define SOAP_TYPE___ns1__getOrGenerateGraphCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getOrGenerateGraphCode(struct soap*, struct __ns1__getOrGenerateGraphCode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getOrGenerateGraphCode(struct soap*, const struct __ns1__getOrGenerateGraphCode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getOrGenerateGraphCode(struct soap*, const char*, int, const struct __ns1__getOrGenerateGraphCode *, const char*);
SOAP_FMAC3 struct __ns1__getOrGenerateGraphCode * SOAP_FMAC4 soap_in___ns1__getOrGenerateGraphCode(struct soap*, const char*, struct __ns1__getOrGenerateGraphCode *, const char*);
SOAP_FMAC1 struct __ns1__getOrGenerateGraphCode * SOAP_FMAC2 soap_instantiate___ns1__getOrGenerateGraphCode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getOrGenerateGraphCode * soap_new___ns1__getOrGenerateGraphCode(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getOrGenerateGraphCode(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getOrGenerateGraphCode * soap_new_req___ns1__getOrGenerateGraphCode(
	struct soap *soap)
{
	struct __ns1__getOrGenerateGraphCode *_p = ::soap_new___ns1__getOrGenerateGraphCode(soap);
	if (_p)
	{	::soap_default___ns1__getOrGenerateGraphCode(soap, _p);
	}
	return _p;
}

inline struct __ns1__getOrGenerateGraphCode * soap_new_set___ns1__getOrGenerateGraphCode(
	struct soap *soap,
	ns1__getOrGenerateGraphCode *ns1__getOrGenerateGraphCode_)
{
	struct __ns1__getOrGenerateGraphCode *_p = ::soap_new___ns1__getOrGenerateGraphCode(soap);
	if (_p)
	{	::soap_default___ns1__getOrGenerateGraphCode(soap, _p);
		_p->ns1__getOrGenerateGraphCode_ = ns1__getOrGenerateGraphCode_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getOrGenerateGraphCode(struct soap*, const struct __ns1__getOrGenerateGraphCode *, const char*, const char*);

inline int soap_write___ns1__getOrGenerateGraphCode(struct soap *soap, struct __ns1__getOrGenerateGraphCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getOrGenerateGraphCode(soap, p), 0) || ::soap_put___ns1__getOrGenerateGraphCode(soap, p, "-ns1:getOrGenerateGraphCode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getOrGenerateGraphCode(struct soap *soap, const char *URL, struct __ns1__getOrGenerateGraphCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrGenerateGraphCode(soap, p), 0) || ::soap_put___ns1__getOrGenerateGraphCode(soap, p, "-ns1:getOrGenerateGraphCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getOrGenerateGraphCode(struct soap *soap, const char *URL, struct __ns1__getOrGenerateGraphCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrGenerateGraphCode(soap, p), 0) || ::soap_put___ns1__getOrGenerateGraphCode(soap, p, "-ns1:getOrGenerateGraphCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getOrGenerateGraphCode(struct soap *soap, const char *URL, struct __ns1__getOrGenerateGraphCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getOrGenerateGraphCode(soap, p), 0) || ::soap_put___ns1__getOrGenerateGraphCode(soap, p, "-ns1:getOrGenerateGraphCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getOrGenerateGraphCode * SOAP_FMAC4 soap_get___ns1__getOrGenerateGraphCode(struct soap*, struct __ns1__getOrGenerateGraphCode *, const char*, const char*);

inline int soap_read___ns1__getOrGenerateGraphCode(struct soap *soap, struct __ns1__getOrGenerateGraphCode *p)
{
	if (p)
	{	::soap_default___ns1__getOrGenerateGraphCode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getOrGenerateGraphCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getOrGenerateGraphCode(struct soap *soap, const char *URL, struct __ns1__getOrGenerateGraphCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getOrGenerateGraphCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getOrGenerateGraphCode(struct soap *soap, struct __ns1__getOrGenerateGraphCode *p)
{
	if (::soap_read___ns1__getOrGenerateGraphCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__processAssetFromURL_DEFINED
#define SOAP_TYPE___ns1__processAssetFromURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__processAssetFromURL(struct soap*, struct __ns1__processAssetFromURL *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__processAssetFromURL(struct soap*, const struct __ns1__processAssetFromURL *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__processAssetFromURL(struct soap*, const char*, int, const struct __ns1__processAssetFromURL *, const char*);
SOAP_FMAC3 struct __ns1__processAssetFromURL * SOAP_FMAC4 soap_in___ns1__processAssetFromURL(struct soap*, const char*, struct __ns1__processAssetFromURL *, const char*);
SOAP_FMAC1 struct __ns1__processAssetFromURL * SOAP_FMAC2 soap_instantiate___ns1__processAssetFromURL(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__processAssetFromURL * soap_new___ns1__processAssetFromURL(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__processAssetFromURL(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__processAssetFromURL * soap_new_req___ns1__processAssetFromURL(
	struct soap *soap)
{
	struct __ns1__processAssetFromURL *_p = ::soap_new___ns1__processAssetFromURL(soap);
	if (_p)
	{	::soap_default___ns1__processAssetFromURL(soap, _p);
	}
	return _p;
}

inline struct __ns1__processAssetFromURL * soap_new_set___ns1__processAssetFromURL(
	struct soap *soap,
	ns1__processAssetFromURL *ns1__processAssetFromURL_)
{
	struct __ns1__processAssetFromURL *_p = ::soap_new___ns1__processAssetFromURL(soap);
	if (_p)
	{	::soap_default___ns1__processAssetFromURL(soap, _p);
		_p->ns1__processAssetFromURL_ = ns1__processAssetFromURL_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__processAssetFromURL(struct soap*, const struct __ns1__processAssetFromURL *, const char*, const char*);

inline int soap_write___ns1__processAssetFromURL(struct soap *soap, struct __ns1__processAssetFromURL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__processAssetFromURL(soap, p), 0) || ::soap_put___ns1__processAssetFromURL(soap, p, "-ns1:processAssetFromURL", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__processAssetFromURL(struct soap *soap, const char *URL, struct __ns1__processAssetFromURL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromURL(soap, p), 0) || ::soap_put___ns1__processAssetFromURL(soap, p, "-ns1:processAssetFromURL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__processAssetFromURL(struct soap *soap, const char *URL, struct __ns1__processAssetFromURL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromURL(soap, p), 0) || ::soap_put___ns1__processAssetFromURL(soap, p, "-ns1:processAssetFromURL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__processAssetFromURL(struct soap *soap, const char *URL, struct __ns1__processAssetFromURL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromURL(soap, p), 0) || ::soap_put___ns1__processAssetFromURL(soap, p, "-ns1:processAssetFromURL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__processAssetFromURL * SOAP_FMAC4 soap_get___ns1__processAssetFromURL(struct soap*, struct __ns1__processAssetFromURL *, const char*, const char*);

inline int soap_read___ns1__processAssetFromURL(struct soap *soap, struct __ns1__processAssetFromURL *p)
{
	if (p)
	{	::soap_default___ns1__processAssetFromURL(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__processAssetFromURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__processAssetFromURL(struct soap *soap, const char *URL, struct __ns1__processAssetFromURL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__processAssetFromURL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__processAssetFromURL(struct soap *soap, struct __ns1__processAssetFromURL *p)
{
	if (::soap_read___ns1__processAssetFromURL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__processAssetFromBytes_DEFINED
#define SOAP_TYPE___ns1__processAssetFromBytes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__processAssetFromBytes(struct soap*, struct __ns1__processAssetFromBytes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__processAssetFromBytes(struct soap*, const struct __ns1__processAssetFromBytes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__processAssetFromBytes(struct soap*, const char*, int, const struct __ns1__processAssetFromBytes *, const char*);
SOAP_FMAC3 struct __ns1__processAssetFromBytes * SOAP_FMAC4 soap_in___ns1__processAssetFromBytes(struct soap*, const char*, struct __ns1__processAssetFromBytes *, const char*);
SOAP_FMAC1 struct __ns1__processAssetFromBytes * SOAP_FMAC2 soap_instantiate___ns1__processAssetFromBytes(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__processAssetFromBytes * soap_new___ns1__processAssetFromBytes(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__processAssetFromBytes(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__processAssetFromBytes * soap_new_req___ns1__processAssetFromBytes(
	struct soap *soap)
{
	struct __ns1__processAssetFromBytes *_p = ::soap_new___ns1__processAssetFromBytes(soap);
	if (_p)
	{	::soap_default___ns1__processAssetFromBytes(soap, _p);
	}
	return _p;
}

inline struct __ns1__processAssetFromBytes * soap_new_set___ns1__processAssetFromBytes(
	struct soap *soap,
	ns1__processAssetFromBytes *ns1__processAssetFromBytes_)
{
	struct __ns1__processAssetFromBytes *_p = ::soap_new___ns1__processAssetFromBytes(soap);
	if (_p)
	{	::soap_default___ns1__processAssetFromBytes(soap, _p);
		_p->ns1__processAssetFromBytes_ = ns1__processAssetFromBytes_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__processAssetFromBytes(struct soap*, const struct __ns1__processAssetFromBytes *, const char*, const char*);

inline int soap_write___ns1__processAssetFromBytes(struct soap *soap, struct __ns1__processAssetFromBytes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__processAssetFromBytes(soap, p), 0) || ::soap_put___ns1__processAssetFromBytes(soap, p, "-ns1:processAssetFromBytes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__processAssetFromBytes(struct soap *soap, const char *URL, struct __ns1__processAssetFromBytes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromBytes(soap, p), 0) || ::soap_put___ns1__processAssetFromBytes(soap, p, "-ns1:processAssetFromBytes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__processAssetFromBytes(struct soap *soap, const char *URL, struct __ns1__processAssetFromBytes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromBytes(soap, p), 0) || ::soap_put___ns1__processAssetFromBytes(soap, p, "-ns1:processAssetFromBytes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__processAssetFromBytes(struct soap *soap, const char *URL, struct __ns1__processAssetFromBytes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromBytes(soap, p), 0) || ::soap_put___ns1__processAssetFromBytes(soap, p, "-ns1:processAssetFromBytes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__processAssetFromBytes * SOAP_FMAC4 soap_get___ns1__processAssetFromBytes(struct soap*, struct __ns1__processAssetFromBytes *, const char*, const char*);

inline int soap_read___ns1__processAssetFromBytes(struct soap *soap, struct __ns1__processAssetFromBytes *p)
{
	if (p)
	{	::soap_default___ns1__processAssetFromBytes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__processAssetFromBytes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__processAssetFromBytes(struct soap *soap, const char *URL, struct __ns1__processAssetFromBytes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__processAssetFromBytes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__processAssetFromBytes(struct soap *soap, struct __ns1__processAssetFromBytes *p)
{
	if (::soap_read___ns1__processAssetFromBytes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__processAssetFromFile_DEFINED
#define SOAP_TYPE___ns1__processAssetFromFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__processAssetFromFile(struct soap*, struct __ns1__processAssetFromFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__processAssetFromFile(struct soap*, const struct __ns1__processAssetFromFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__processAssetFromFile(struct soap*, const char*, int, const struct __ns1__processAssetFromFile *, const char*);
SOAP_FMAC3 struct __ns1__processAssetFromFile * SOAP_FMAC4 soap_in___ns1__processAssetFromFile(struct soap*, const char*, struct __ns1__processAssetFromFile *, const char*);
SOAP_FMAC1 struct __ns1__processAssetFromFile * SOAP_FMAC2 soap_instantiate___ns1__processAssetFromFile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__processAssetFromFile * soap_new___ns1__processAssetFromFile(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__processAssetFromFile(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__processAssetFromFile * soap_new_req___ns1__processAssetFromFile(
	struct soap *soap)
{
	struct __ns1__processAssetFromFile *_p = ::soap_new___ns1__processAssetFromFile(soap);
	if (_p)
	{	::soap_default___ns1__processAssetFromFile(soap, _p);
	}
	return _p;
}

inline struct __ns1__processAssetFromFile * soap_new_set___ns1__processAssetFromFile(
	struct soap *soap,
	ns1__processAssetFromFile *ns1__processAssetFromFile_)
{
	struct __ns1__processAssetFromFile *_p = ::soap_new___ns1__processAssetFromFile(soap);
	if (_p)
	{	::soap_default___ns1__processAssetFromFile(soap, _p);
		_p->ns1__processAssetFromFile_ = ns1__processAssetFromFile_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__processAssetFromFile(struct soap*, const struct __ns1__processAssetFromFile *, const char*, const char*);

inline int soap_write___ns1__processAssetFromFile(struct soap *soap, struct __ns1__processAssetFromFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__processAssetFromFile(soap, p), 0) || ::soap_put___ns1__processAssetFromFile(soap, p, "-ns1:processAssetFromFile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__processAssetFromFile(struct soap *soap, const char *URL, struct __ns1__processAssetFromFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromFile(soap, p), 0) || ::soap_put___ns1__processAssetFromFile(soap, p, "-ns1:processAssetFromFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__processAssetFromFile(struct soap *soap, const char *URL, struct __ns1__processAssetFromFile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromFile(soap, p), 0) || ::soap_put___ns1__processAssetFromFile(soap, p, "-ns1:processAssetFromFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__processAssetFromFile(struct soap *soap, const char *URL, struct __ns1__processAssetFromFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__processAssetFromFile(soap, p), 0) || ::soap_put___ns1__processAssetFromFile(soap, p, "-ns1:processAssetFromFile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__processAssetFromFile * SOAP_FMAC4 soap_get___ns1__processAssetFromFile(struct soap*, struct __ns1__processAssetFromFile *, const char*, const char*);

inline int soap_read___ns1__processAssetFromFile(struct soap *soap, struct __ns1__processAssetFromFile *p)
{
	if (p)
	{	::soap_default___ns1__processAssetFromFile(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__processAssetFromFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__processAssetFromFile(struct soap *soap, const char *URL, struct __ns1__processAssetFromFile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__processAssetFromFile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__processAssetFromFile(struct soap *soap, struct __ns1__processAssetFromFile *p)
{
	if (::soap_read___ns1__processAssetFromFile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getCollection_DEFINED
#define SOAP_TYPE___ns1__getCollection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCollection(struct soap*, struct __ns1__getCollection *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCollection(struct soap*, const struct __ns1__getCollection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCollection(struct soap*, const char*, int, const struct __ns1__getCollection *, const char*);
SOAP_FMAC3 struct __ns1__getCollection * SOAP_FMAC4 soap_in___ns1__getCollection(struct soap*, const char*, struct __ns1__getCollection *, const char*);
SOAP_FMAC1 struct __ns1__getCollection * SOAP_FMAC2 soap_instantiate___ns1__getCollection(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getCollection * soap_new___ns1__getCollection(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getCollection(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getCollection * soap_new_req___ns1__getCollection(
	struct soap *soap)
{
	struct __ns1__getCollection *_p = ::soap_new___ns1__getCollection(soap);
	if (_p)
	{	::soap_default___ns1__getCollection(soap, _p);
	}
	return _p;
}

inline struct __ns1__getCollection * soap_new_set___ns1__getCollection(
	struct soap *soap,
	ns1__getCollection *ns1__getCollection_)
{
	struct __ns1__getCollection *_p = ::soap_new___ns1__getCollection(soap);
	if (_p)
	{	::soap_default___ns1__getCollection(soap, _p);
		_p->ns1__getCollection_ = ns1__getCollection_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCollection(struct soap*, const struct __ns1__getCollection *, const char*, const char*);

inline int soap_write___ns1__getCollection(struct soap *soap, struct __ns1__getCollection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getCollection(soap, p), 0) || ::soap_put___ns1__getCollection(soap, p, "-ns1:getCollection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getCollection(struct soap *soap, const char *URL, struct __ns1__getCollection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getCollection(soap, p), 0) || ::soap_put___ns1__getCollection(soap, p, "-ns1:getCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getCollection(struct soap *soap, const char *URL, struct __ns1__getCollection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getCollection(soap, p), 0) || ::soap_put___ns1__getCollection(soap, p, "-ns1:getCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getCollection(struct soap *soap, const char *URL, struct __ns1__getCollection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getCollection(soap, p), 0) || ::soap_put___ns1__getCollection(soap, p, "-ns1:getCollection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getCollection * SOAP_FMAC4 soap_get___ns1__getCollection(struct soap*, struct __ns1__getCollection *, const char*, const char*);

inline int soap_read___ns1__getCollection(struct soap *soap, struct __ns1__getCollection *p)
{
	if (p)
	{	::soap_default___ns1__getCollection(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getCollection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getCollection(struct soap *soap, const char *URL, struct __ns1__getCollection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getCollection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getCollection(struct soap *soap, struct __ns1__getCollection *p)
{
	if (::soap_read___ns1__getCollection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getAuthToken_DEFINED
#define SOAP_TYPE___ns1__getAuthToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAuthToken(struct soap*, struct __ns1__getAuthToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAuthToken(struct soap*, const struct __ns1__getAuthToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAuthToken(struct soap*, const char*, int, const struct __ns1__getAuthToken *, const char*);
SOAP_FMAC3 struct __ns1__getAuthToken * SOAP_FMAC4 soap_in___ns1__getAuthToken(struct soap*, const char*, struct __ns1__getAuthToken *, const char*);
SOAP_FMAC1 struct __ns1__getAuthToken * SOAP_FMAC2 soap_instantiate___ns1__getAuthToken(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAuthToken * soap_new___ns1__getAuthToken(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getAuthToken(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getAuthToken * soap_new_req___ns1__getAuthToken(
	struct soap *soap)
{
	struct __ns1__getAuthToken *_p = ::soap_new___ns1__getAuthToken(soap);
	if (_p)
	{	::soap_default___ns1__getAuthToken(soap, _p);
	}
	return _p;
}

inline struct __ns1__getAuthToken * soap_new_set___ns1__getAuthToken(
	struct soap *soap,
	ns1__getAuthToken *ns1__getAuthToken_)
{
	struct __ns1__getAuthToken *_p = ::soap_new___ns1__getAuthToken(soap);
	if (_p)
	{	::soap_default___ns1__getAuthToken(soap, _p);
		_p->ns1__getAuthToken_ = ns1__getAuthToken_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAuthToken(struct soap*, const struct __ns1__getAuthToken *, const char*, const char*);

inline int soap_write___ns1__getAuthToken(struct soap *soap, struct __ns1__getAuthToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getAuthToken(soap, p), 0) || ::soap_put___ns1__getAuthToken(soap, p, "-ns1:getAuthToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getAuthToken(struct soap *soap, const char *URL, struct __ns1__getAuthToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAuthToken(soap, p), 0) || ::soap_put___ns1__getAuthToken(soap, p, "-ns1:getAuthToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getAuthToken(struct soap *soap, const char *URL, struct __ns1__getAuthToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAuthToken(soap, p), 0) || ::soap_put___ns1__getAuthToken(soap, p, "-ns1:getAuthToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getAuthToken(struct soap *soap, const char *URL, struct __ns1__getAuthToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getAuthToken(soap, p), 0) || ::soap_put___ns1__getAuthToken(soap, p, "-ns1:getAuthToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getAuthToken * SOAP_FMAC4 soap_get___ns1__getAuthToken(struct soap*, struct __ns1__getAuthToken *, const char*, const char*);

inline int soap_read___ns1__getAuthToken(struct soap *soap, struct __ns1__getAuthToken *p)
{
	if (p)
	{	::soap_default___ns1__getAuthToken(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getAuthToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getAuthToken(struct soap *soap, const char *URL, struct __ns1__getAuthToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getAuthToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getAuthToken(struct soap *soap, struct __ns1__getAuthToken *p)
{
	if (::soap_read___ns1__getAuthToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__getSimilarAssets_DEFINED
#define SOAP_TYPE_PointerTons1__getSimilarAssets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getSimilarAssets(struct soap*, ns1__getSimilarAssets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getSimilarAssets(struct soap*, const char *, int, ns1__getSimilarAssets *const*, const char *);
SOAP_FMAC3 ns1__getSimilarAssets ** SOAP_FMAC4 soap_in_PointerTons1__getSimilarAssets(struct soap*, const char*, ns1__getSimilarAssets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getSimilarAssets(struct soap*, ns1__getSimilarAssets *const*, const char*, const char*);
SOAP_FMAC3 ns1__getSimilarAssets ** SOAP_FMAC4 soap_get_PointerTons1__getSimilarAssets(struct soap*, ns1__getSimilarAssets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getRecommendedAssets_DEFINED
#define SOAP_TYPE_PointerTons1__getRecommendedAssets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getRecommendedAssets(struct soap*, ns1__getRecommendedAssets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getRecommendedAssets(struct soap*, const char *, int, ns1__getRecommendedAssets *const*, const char *);
SOAP_FMAC3 ns1__getRecommendedAssets ** SOAP_FMAC4 soap_in_PointerTons1__getRecommendedAssets(struct soap*, const char*, ns1__getRecommendedAssets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getRecommendedAssets(struct soap*, ns1__getRecommendedAssets *const*, const char*, const char*);
SOAP_FMAC3 ns1__getRecommendedAssets ** SOAP_FMAC4 soap_get_PointerTons1__getRecommendedAssets(struct soap*, ns1__getRecommendedAssets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__setProcessingPlugins_DEFINED
#define SOAP_TYPE_PointerTons1__setProcessingPlugins_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__setProcessingPlugins(struct soap*, ns1__setProcessingPlugins *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__setProcessingPlugins(struct soap*, const char *, int, ns1__setProcessingPlugins *const*, const char *);
SOAP_FMAC3 ns1__setProcessingPlugins ** SOAP_FMAC4 soap_in_PointerTons1__setProcessingPlugins(struct soap*, const char*, ns1__setProcessingPlugins **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__setProcessingPlugins(struct soap*, ns1__setProcessingPlugins *const*, const char*, const char*);
SOAP_FMAC3 ns1__setProcessingPlugins ** SOAP_FMAC4 soap_get_PointerTons1__setProcessingPlugins(struct soap*, ns1__setProcessingPlugins **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getOrGenerateGraphCode_DEFINED
#define SOAP_TYPE_PointerTons1__getOrGenerateGraphCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getOrGenerateGraphCode(struct soap*, ns1__getOrGenerateGraphCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getOrGenerateGraphCode(struct soap*, const char *, int, ns1__getOrGenerateGraphCode *const*, const char *);
SOAP_FMAC3 ns1__getOrGenerateGraphCode ** SOAP_FMAC4 soap_in_PointerTons1__getOrGenerateGraphCode(struct soap*, const char*, ns1__getOrGenerateGraphCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getOrGenerateGraphCode(struct soap*, ns1__getOrGenerateGraphCode *const*, const char*, const char*);
SOAP_FMAC3 ns1__getOrGenerateGraphCode ** SOAP_FMAC4 soap_get_PointerTons1__getOrGenerateGraphCode(struct soap*, ns1__getOrGenerateGraphCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__processAssetFromURL_DEFINED
#define SOAP_TYPE_PointerTons1__processAssetFromURL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__processAssetFromURL(struct soap*, ns1__processAssetFromURL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__processAssetFromURL(struct soap*, const char *, int, ns1__processAssetFromURL *const*, const char *);
SOAP_FMAC3 ns1__processAssetFromURL ** SOAP_FMAC4 soap_in_PointerTons1__processAssetFromURL(struct soap*, const char*, ns1__processAssetFromURL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__processAssetFromURL(struct soap*, ns1__processAssetFromURL *const*, const char*, const char*);
SOAP_FMAC3 ns1__processAssetFromURL ** SOAP_FMAC4 soap_get_PointerTons1__processAssetFromURL(struct soap*, ns1__processAssetFromURL **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__processAssetFromBytes_DEFINED
#define SOAP_TYPE_PointerTons1__processAssetFromBytes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__processAssetFromBytes(struct soap*, ns1__processAssetFromBytes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__processAssetFromBytes(struct soap*, const char *, int, ns1__processAssetFromBytes *const*, const char *);
SOAP_FMAC3 ns1__processAssetFromBytes ** SOAP_FMAC4 soap_in_PointerTons1__processAssetFromBytes(struct soap*, const char*, ns1__processAssetFromBytes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__processAssetFromBytes(struct soap*, ns1__processAssetFromBytes *const*, const char*, const char*);
SOAP_FMAC3 ns1__processAssetFromBytes ** SOAP_FMAC4 soap_get_PointerTons1__processAssetFromBytes(struct soap*, ns1__processAssetFromBytes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__processAssetFromFile_DEFINED
#define SOAP_TYPE_PointerTons1__processAssetFromFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__processAssetFromFile(struct soap*, ns1__processAssetFromFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__processAssetFromFile(struct soap*, const char *, int, ns1__processAssetFromFile *const*, const char *);
SOAP_FMAC3 ns1__processAssetFromFile ** SOAP_FMAC4 soap_in_PointerTons1__processAssetFromFile(struct soap*, const char*, ns1__processAssetFromFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__processAssetFromFile(struct soap*, ns1__processAssetFromFile *const*, const char*, const char*);
SOAP_FMAC3 ns1__processAssetFromFile ** SOAP_FMAC4 soap_get_PointerTons1__processAssetFromFile(struct soap*, ns1__processAssetFromFile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getCollection_DEFINED
#define SOAP_TYPE_PointerTons1__getCollection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getCollection(struct soap*, ns1__getCollection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getCollection(struct soap*, const char *, int, ns1__getCollection *const*, const char *);
SOAP_FMAC3 ns1__getCollection ** SOAP_FMAC4 soap_in_PointerTons1__getCollection(struct soap*, const char*, ns1__getCollection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getCollection(struct soap*, ns1__getCollection *const*, const char*, const char*);
SOAP_FMAC3 ns1__getCollection ** SOAP_FMAC4 soap_get_PointerTons1__getCollection(struct soap*, ns1__getCollection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getAuthToken_DEFINED
#define SOAP_TYPE_PointerTons1__getAuthToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getAuthToken(struct soap*, ns1__getAuthToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getAuthToken(struct soap*, const char *, int, ns1__getAuthToken *const*, const char *);
SOAP_FMAC3 ns1__getAuthToken ** SOAP_FMAC4 soap_in_PointerTons1__getAuthToken(struct soap*, const char*, ns1__getAuthToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getAuthToken(struct soap*, ns1__getAuthToken *const*, const char*, const char*);
SOAP_FMAC3 ns1__getAuthToken ** SOAP_FMAC4 soap_get_PointerTons1__getAuthToken(struct soap*, ns1__getAuthToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__graphCode_DEFINED
#define SOAP_TYPE_PointerTons1__graphCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__graphCode(struct soap*, ns1__graphCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__graphCode(struct soap*, const char *, int, ns1__graphCode *const*, const char *);
SOAP_FMAC3 ns1__graphCode ** SOAP_FMAC4 soap_in_PointerTons1__graphCode(struct soap*, const char*, ns1__graphCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__graphCode(struct soap*, ns1__graphCode *const*, const char*, const char*);
SOAP_FMAC3 ns1__graphCode ** SOAP_FMAC4 soap_get_PointerTons1__graphCode(struct soap*, ns1__graphCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__security_DEFINED
#define SOAP_TYPE_PointerTons1__security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__security(struct soap*, ns1__security *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__security(struct soap*, const char *, int, ns1__security *const*, const char *);
SOAP_FMAC3 ns1__security ** SOAP_FMAC4 soap_in_PointerTons1__security(struct soap*, const char*, ns1__security **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__security(struct soap*, ns1__security *const*, const char*, const char*);
SOAP_FMAC3 ns1__security ** SOAP_FMAC4 soap_get_PointerTons1__security(struct soap*, ns1__security **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__generalMetadata_DEFINED
#define SOAP_TYPE_PointerTons1__generalMetadata_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__generalMetadata(struct soap*, ns1__generalMetadata *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__generalMetadata(struct soap*, const char *, int, ns1__generalMetadata *const*, const char *);
SOAP_FMAC3 ns1__generalMetadata ** SOAP_FMAC4 soap_in_PointerTons1__generalMetadata(struct soap*, const char*, ns1__generalMetadata **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__generalMetadata(struct soap*, ns1__generalMetadata *const*, const char*, const char*);
SOAP_FMAC3 ns1__generalMetadata ** SOAP_FMAC4 soap_get_PointerTons1__generalMetadata(struct soap*, ns1__generalMetadata **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__node_DEFINED
#define SOAP_TYPE_PointerTons1__node_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__node(struct soap*, ns1__node *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__node(struct soap*, const char *, int, ns1__node *const*, const char *);
SOAP_FMAC3 ns1__node ** SOAP_FMAC4 soap_in_PointerTons1__node(struct soap*, const char*, ns1__node **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__node(struct soap*, ns1__node *const*, const char*, const char*);
SOAP_FMAC3 ns1__node ** SOAP_FMAC4 soap_get_PointerTons1__node(struct soap*, ns1__node **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__mmfg_DEFINED
#define SOAP_TYPE_PointerTons1__mmfg_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__mmfg(struct soap*, ns1__mmfg *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__mmfg(struct soap*, const char *, int, ns1__mmfg *const*, const char *);
SOAP_FMAC3 ns1__mmfg ** SOAP_FMAC4 soap_in_PointerTons1__mmfg(struct soap*, const char*, ns1__mmfg **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__mmfg(struct soap*, ns1__mmfg *const*, const char*, const char*);
SOAP_FMAC3 ns1__mmfg ** SOAP_FMAC4 soap_get_PointerTons1__mmfg(struct soap*, ns1__mmfg **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__mmfg_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__mmfg_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__mmfg(struct soap*, std::vector<ns1__mmfg *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__mmfg(struct soap*, const std::vector<ns1__mmfg *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__mmfg(struct soap*, const char*, int, const std::vector<ns1__mmfg *> *, const char*);
SOAP_FMAC3 std::vector<ns1__mmfg *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__mmfg(struct soap*, const char*, std::vector<ns1__mmfg *> *, const char*);
SOAP_FMAC1 std::vector<ns1__mmfg *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__mmfg(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__mmfg *>  * soap_new_std__vectorTemplateOfPointerTons1__mmfg(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__mmfg(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOffloat_DEFINED
#define SOAP_TYPE_std__vectorTemplateOffloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOffloat(struct soap*, std::vector<float> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOffloat(struct soap*, const std::vector<float> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOffloat(struct soap*, const char*, int, const std::vector<float> *, const char*);
SOAP_FMAC3 std::vector<float> * SOAP_FMAC4 soap_in_std__vectorTemplateOffloat(struct soap*, const char*, std::vector<float> *, const char*);
SOAP_FMAC1 std::vector<float>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOffloat(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<float>  * soap_new_std__vectorTemplateOffloat(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOffloat(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__node_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__node_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__node(struct soap*, std::vector<ns1__node *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__node(struct soap*, const std::vector<ns1__node *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__node(struct soap*, const char*, int, const std::vector<ns1__node *> *, const char*);
SOAP_FMAC3 std::vector<ns1__node *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__node(struct soap*, const char*, std::vector<ns1__node *> *, const char*);
SOAP_FMAC1 std::vector<ns1__node *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__node(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__node *>  * soap_new_std__vectorTemplateOfPointerTons1__node(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__node(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
