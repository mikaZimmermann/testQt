/* soapC.cpp
   Generated by gSOAP 2.8.124 for gmafHeader

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.124 2023-01-31 13:18:04 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	if (!soap->fault)
		return NULL;
	if (soap->version == 2)
		return soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode ? soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value : NULL;
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, tag, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, tag, NULL, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_ns1__getCollectionResponse:
		return soap_in_ns1__getCollectionResponse(soap, tag, NULL, "ns1:getCollectionResponse");
	case SOAP_TYPE_ns1__getCollection:
		return soap_in_ns1__getCollection(soap, tag, NULL, "ns1:getCollection");
	case SOAP_TYPE_ns1__processAssetFromFileResponse:
		return soap_in_ns1__processAssetFromFileResponse(soap, tag, NULL, "ns1:processAssetFromFileResponse");
	case SOAP_TYPE_ns1__processAssetFromFile:
		return soap_in_ns1__processAssetFromFile(soap, tag, NULL, "ns1:processAssetFromFile");
	case SOAP_TYPE_ns1__setProcessingPluginsResponse:
		return soap_in_ns1__setProcessingPluginsResponse(soap, tag, NULL, "ns1:setProcessingPluginsResponse");
	case SOAP_TYPE_ns1__setProcessingPlugins:
		return soap_in_ns1__setProcessingPlugins(soap, tag, NULL, "ns1:setProcessingPlugins");
	case SOAP_TYPE_ns1__processAssetFromBytesResponse:
		return soap_in_ns1__processAssetFromBytesResponse(soap, tag, NULL, "ns1:processAssetFromBytesResponse");
	case SOAP_TYPE_ns1__processAssetFromBytes:
		return soap_in_ns1__processAssetFromBytes(soap, tag, NULL, "ns1:processAssetFromBytes");
	case SOAP_TYPE_ns1__getAuthTokenResponse:
		return soap_in_ns1__getAuthTokenResponse(soap, tag, NULL, "ns1:getAuthTokenResponse");
	case SOAP_TYPE_ns1__getAuthToken:
		return soap_in_ns1__getAuthToken(soap, tag, NULL, "ns1:getAuthToken");
	case SOAP_TYPE_ns1__getRecommendedAssetsResponse:
		return soap_in_ns1__getRecommendedAssetsResponse(soap, tag, NULL, "ns1:getRecommendedAssetsResponse");
	case SOAP_TYPE_ns1__getRecommendedAssets:
		return soap_in_ns1__getRecommendedAssets(soap, tag, NULL, "ns1:getRecommendedAssets");
	case SOAP_TYPE_ns1__getSimilarAssetsResponse:
		return soap_in_ns1__getSimilarAssetsResponse(soap, tag, NULL, "ns1:getSimilarAssetsResponse");
	case SOAP_TYPE_ns1__getSimilarAssets:
		return soap_in_ns1__getSimilarAssets(soap, tag, NULL, "ns1:getSimilarAssets");
	case SOAP_TYPE_ns1__graphCode:
		return soap_in_ns1__graphCode(soap, tag, NULL, "ns1:graphCode");
	case SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse:
		return soap_in_ns1__getOrGenerateGraphCodeResponse(soap, tag, NULL, "ns1:getOrGenerateGraphCodeResponse");
	case SOAP_TYPE_ns1__getOrGenerateGraphCode:
		return soap_in_ns1__getOrGenerateGraphCode(soap, tag, NULL, "ns1:getOrGenerateGraphCode");
	case SOAP_TYPE_ns1__security:
		return soap_in_ns1__security(soap, tag, NULL, "ns1:security");
	case SOAP_TYPE_ns1__generalMetadata:
		return soap_in_ns1__generalMetadata(soap, tag, NULL, "ns1:generalMetadata");
	case SOAP_TYPE_ns1__node:
		return soap_in_ns1__node(soap, tag, NULL, "ns1:node");
	case SOAP_TYPE_ns1__mmfg:
		return soap_in_ns1__mmfg(soap, tag, NULL, "ns1:mmfg");
	case SOAP_TYPE_ns1__processAssetFromURLResponse:
		return soap_in_ns1__processAssetFromURLResponse(soap, tag, NULL, "ns1:processAssetFromURLResponse");
	case SOAP_TYPE_ns1__processAssetFromURL:
		return soap_in_ns1__processAssetFromURL(soap, tag, NULL, "ns1:processAssetFromURL");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__getSimilarAssets:
		return soap_in_PointerTons1__getSimilarAssets(soap, tag, NULL, "ns1:getSimilarAssets");
	case SOAP_TYPE_PointerTons1__getRecommendedAssets:
		return soap_in_PointerTons1__getRecommendedAssets(soap, tag, NULL, "ns1:getRecommendedAssets");
	case SOAP_TYPE_PointerTons1__setProcessingPlugins:
		return soap_in_PointerTons1__setProcessingPlugins(soap, tag, NULL, "ns1:setProcessingPlugins");
	case SOAP_TYPE_PointerTons1__getOrGenerateGraphCode:
		return soap_in_PointerTons1__getOrGenerateGraphCode(soap, tag, NULL, "ns1:getOrGenerateGraphCode");
	case SOAP_TYPE_PointerTons1__processAssetFromURL:
		return soap_in_PointerTons1__processAssetFromURL(soap, tag, NULL, "ns1:processAssetFromURL");
	case SOAP_TYPE_PointerTons1__processAssetFromBytes:
		return soap_in_PointerTons1__processAssetFromBytes(soap, tag, NULL, "ns1:processAssetFromBytes");
	case SOAP_TYPE_PointerTons1__processAssetFromFile:
		return soap_in_PointerTons1__processAssetFromFile(soap, tag, NULL, "ns1:processAssetFromFile");
	case SOAP_TYPE_PointerTons1__getCollection:
		return soap_in_PointerTons1__getCollection(soap, tag, NULL, "ns1:getCollection");
	case SOAP_TYPE_PointerTons1__getAuthToken:
		return soap_in_PointerTons1__getAuthToken(soap, tag, NULL, "ns1:getAuthToken");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__graphCode:
		return soap_in_PointerTons1__graphCode(soap, tag, NULL, "ns1:graphCode");
	case SOAP_TYPE_PointerTodateTime:
		return soap_in_PointerTodateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTons1__security:
		return soap_in_PointerTons1__security(soap, tag, NULL, "ns1:security");
	case SOAP_TYPE_PointerTons1__generalMetadata:
		return soap_in_PointerTons1__generalMetadata(soap, tag, NULL, "ns1:generalMetadata");
	case SOAP_TYPE_PointerTons1__node:
		return soap_in_PointerTons1__node(soap, tag, NULL, "ns1:node");
	case SOAP_TYPE_PointerTons1__mmfg:
		return soap_in_PointerTons1__mmfg(soap, tag, NULL, "ns1:mmfg");
	case SOAP_TYPE_PointerToxsd__anyURI:
		return soap_in_PointerToxsd__anyURI(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:getCollectionResponse"))
		{	*type = SOAP_TYPE_ns1__getCollectionResponse;
			return soap_in_ns1__getCollectionResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getCollection"))
		{	*type = SOAP_TYPE_ns1__getCollection;
			return soap_in_ns1__getCollection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processAssetFromFileResponse"))
		{	*type = SOAP_TYPE_ns1__processAssetFromFileResponse;
			return soap_in_ns1__processAssetFromFileResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processAssetFromFile"))
		{	*type = SOAP_TYPE_ns1__processAssetFromFile;
			return soap_in_ns1__processAssetFromFile(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setProcessingPluginsResponse"))
		{	*type = SOAP_TYPE_ns1__setProcessingPluginsResponse;
			return soap_in_ns1__setProcessingPluginsResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setProcessingPlugins"))
		{	*type = SOAP_TYPE_ns1__setProcessingPlugins;
			return soap_in_ns1__setProcessingPlugins(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processAssetFromBytesResponse"))
		{	*type = SOAP_TYPE_ns1__processAssetFromBytesResponse;
			return soap_in_ns1__processAssetFromBytesResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processAssetFromBytes"))
		{	*type = SOAP_TYPE_ns1__processAssetFromBytes;
			return soap_in_ns1__processAssetFromBytes(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getAuthTokenResponse"))
		{	*type = SOAP_TYPE_ns1__getAuthTokenResponse;
			return soap_in_ns1__getAuthTokenResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getAuthToken"))
		{	*type = SOAP_TYPE_ns1__getAuthToken;
			return soap_in_ns1__getAuthToken(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRecommendedAssetsResponse"))
		{	*type = SOAP_TYPE_ns1__getRecommendedAssetsResponse;
			return soap_in_ns1__getRecommendedAssetsResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRecommendedAssets"))
		{	*type = SOAP_TYPE_ns1__getRecommendedAssets;
			return soap_in_ns1__getRecommendedAssets(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSimilarAssetsResponse"))
		{	*type = SOAP_TYPE_ns1__getSimilarAssetsResponse;
			return soap_in_ns1__getSimilarAssetsResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSimilarAssets"))
		{	*type = SOAP_TYPE_ns1__getSimilarAssets;
			return soap_in_ns1__getSimilarAssets(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:graphCode"))
		{	*type = SOAP_TYPE_ns1__graphCode;
			return soap_in_ns1__graphCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getOrGenerateGraphCodeResponse"))
		{	*type = SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse;
			return soap_in_ns1__getOrGenerateGraphCodeResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getOrGenerateGraphCode"))
		{	*type = SOAP_TYPE_ns1__getOrGenerateGraphCode;
			return soap_in_ns1__getOrGenerateGraphCode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:security"))
		{	*type = SOAP_TYPE_ns1__security;
			return soap_in_ns1__security(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:generalMetadata"))
		{	*type = SOAP_TYPE_ns1__generalMetadata;
			return soap_in_ns1__generalMetadata(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:node"))
		{	*type = SOAP_TYPE_ns1__node;
			return soap_in_ns1__node(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:mmfg"))
		{	*type = SOAP_TYPE_ns1__mmfg;
			return soap_in_ns1__mmfg(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processAssetFromURLResponse"))
		{	*type = SOAP_TYPE_ns1__processAssetFromURLResponse;
			return soap_in_ns1__processAssetFromURLResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:processAssetFromURL"))
		{	*type = SOAP_TYPE_ns1__processAssetFromURL;
			return soap_in_ns1__processAssetFromURL(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_ns1__getCollectionResponse:
		return ((ns1__getCollectionResponse *)ptr)->soap_out(soap, tag, id, "ns1:getCollectionResponse");
	case SOAP_TYPE_ns1__getCollection:
		return ((ns1__getCollection *)ptr)->soap_out(soap, tag, id, "ns1:getCollection");
	case SOAP_TYPE_ns1__processAssetFromFileResponse:
		return ((ns1__processAssetFromFileResponse *)ptr)->soap_out(soap, tag, id, "ns1:processAssetFromFileResponse");
	case SOAP_TYPE_ns1__processAssetFromFile:
		return ((ns1__processAssetFromFile *)ptr)->soap_out(soap, tag, id, "ns1:processAssetFromFile");
	case SOAP_TYPE_ns1__setProcessingPluginsResponse:
		return ((ns1__setProcessingPluginsResponse *)ptr)->soap_out(soap, tag, id, "ns1:setProcessingPluginsResponse");
	case SOAP_TYPE_ns1__setProcessingPlugins:
		return ((ns1__setProcessingPlugins *)ptr)->soap_out(soap, tag, id, "ns1:setProcessingPlugins");
	case SOAP_TYPE_ns1__processAssetFromBytesResponse:
		return ((ns1__processAssetFromBytesResponse *)ptr)->soap_out(soap, tag, id, "ns1:processAssetFromBytesResponse");
	case SOAP_TYPE_ns1__processAssetFromBytes:
		return ((ns1__processAssetFromBytes *)ptr)->soap_out(soap, tag, id, "ns1:processAssetFromBytes");
	case SOAP_TYPE_ns1__getAuthTokenResponse:
		return ((ns1__getAuthTokenResponse *)ptr)->soap_out(soap, tag, id, "ns1:getAuthTokenResponse");
	case SOAP_TYPE_ns1__getAuthToken:
		return ((ns1__getAuthToken *)ptr)->soap_out(soap, tag, id, "ns1:getAuthToken");
	case SOAP_TYPE_ns1__getRecommendedAssetsResponse:
		return ((ns1__getRecommendedAssetsResponse *)ptr)->soap_out(soap, tag, id, "ns1:getRecommendedAssetsResponse");
	case SOAP_TYPE_ns1__getRecommendedAssets:
		return ((ns1__getRecommendedAssets *)ptr)->soap_out(soap, tag, id, "ns1:getRecommendedAssets");
	case SOAP_TYPE_ns1__getSimilarAssetsResponse:
		return ((ns1__getSimilarAssetsResponse *)ptr)->soap_out(soap, tag, id, "ns1:getSimilarAssetsResponse");
	case SOAP_TYPE_ns1__getSimilarAssets:
		return ((ns1__getSimilarAssets *)ptr)->soap_out(soap, tag, id, "ns1:getSimilarAssets");
	case SOAP_TYPE_ns1__graphCode:
		return ((ns1__graphCode *)ptr)->soap_out(soap, tag, id, "ns1:graphCode");
	case SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse:
		return ((ns1__getOrGenerateGraphCodeResponse *)ptr)->soap_out(soap, tag, id, "ns1:getOrGenerateGraphCodeResponse");
	case SOAP_TYPE_ns1__getOrGenerateGraphCode:
		return ((ns1__getOrGenerateGraphCode *)ptr)->soap_out(soap, tag, id, "ns1:getOrGenerateGraphCode");
	case SOAP_TYPE_ns1__security:
		return ((ns1__security *)ptr)->soap_out(soap, tag, id, "ns1:security");
	case SOAP_TYPE_ns1__generalMetadata:
		return ((ns1__generalMetadata *)ptr)->soap_out(soap, tag, id, "ns1:generalMetadata");
	case SOAP_TYPE_ns1__node:
		return ((ns1__node *)ptr)->soap_out(soap, tag, id, "ns1:node");
	case SOAP_TYPE_ns1__mmfg:
		return ((ns1__mmfg *)ptr)->soap_out(soap, tag, id, "ns1:mmfg");
	case SOAP_TYPE_ns1__processAssetFromURLResponse:
		return ((ns1__processAssetFromURLResponse *)ptr)->soap_out(soap, tag, id, "ns1:processAssetFromURLResponse");
	case SOAP_TYPE_ns1__processAssetFromURL:
		return ((ns1__processAssetFromURL *)ptr)->soap_out(soap, tag, id, "ns1:processAssetFromURL");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__getSimilarAssets:
		return soap_out_PointerTons1__getSimilarAssets(soap, tag, id, (ns1__getSimilarAssets *const*)ptr, "ns1:getSimilarAssets");
	case SOAP_TYPE_PointerTons1__getRecommendedAssets:
		return soap_out_PointerTons1__getRecommendedAssets(soap, tag, id, (ns1__getRecommendedAssets *const*)ptr, "ns1:getRecommendedAssets");
	case SOAP_TYPE_PointerTons1__setProcessingPlugins:
		return soap_out_PointerTons1__setProcessingPlugins(soap, tag, id, (ns1__setProcessingPlugins *const*)ptr, "ns1:setProcessingPlugins");
	case SOAP_TYPE_PointerTons1__getOrGenerateGraphCode:
		return soap_out_PointerTons1__getOrGenerateGraphCode(soap, tag, id, (ns1__getOrGenerateGraphCode *const*)ptr, "ns1:getOrGenerateGraphCode");
	case SOAP_TYPE_PointerTons1__processAssetFromURL:
		return soap_out_PointerTons1__processAssetFromURL(soap, tag, id, (ns1__processAssetFromURL *const*)ptr, "ns1:processAssetFromURL");
	case SOAP_TYPE_PointerTons1__processAssetFromBytes:
		return soap_out_PointerTons1__processAssetFromBytes(soap, tag, id, (ns1__processAssetFromBytes *const*)ptr, "ns1:processAssetFromBytes");
	case SOAP_TYPE_PointerTons1__processAssetFromFile:
		return soap_out_PointerTons1__processAssetFromFile(soap, tag, id, (ns1__processAssetFromFile *const*)ptr, "ns1:processAssetFromFile");
	case SOAP_TYPE_PointerTons1__getCollection:
		return soap_out_PointerTons1__getCollection(soap, tag, id, (ns1__getCollection *const*)ptr, "ns1:getCollection");
	case SOAP_TYPE_PointerTons1__getAuthToken:
		return soap_out_PointerTons1__getAuthToken(soap, tag, id, (ns1__getAuthToken *const*)ptr, "ns1:getAuthToken");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__graphCode:
		return soap_out_PointerTons1__graphCode(soap, tag, id, (ns1__graphCode *const*)ptr, "ns1:graphCode");
	case SOAP_TYPE_PointerTodateTime:
		return soap_out_PointerTodateTime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerTons1__security:
		return soap_out_PointerTons1__security(soap, tag, id, (ns1__security *const*)ptr, "ns1:security");
	case SOAP_TYPE_PointerTons1__generalMetadata:
		return soap_out_PointerTons1__generalMetadata(soap, tag, id, (ns1__generalMetadata *const*)ptr, "ns1:generalMetadata");
	case SOAP_TYPE_PointerTons1__node:
		return soap_out_PointerTons1__node(soap, tag, id, (ns1__node *const*)ptr, "ns1:node");
	case SOAP_TYPE_PointerTons1__mmfg:
		return soap_out_PointerTons1__mmfg(soap, tag, id, (ns1__mmfg *const*)ptr, "ns1:mmfg");
	case SOAP_TYPE_PointerToxsd__anyURI:
		return soap_out_PointerToxsd__anyURI(soap, tag, id, (std::string *const*)ptr, "xsd:anyURI");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__getCollectionResponse:
		((ns1__getCollectionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getCollection:
		((ns1__getCollection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processAssetFromFileResponse:
		((ns1__processAssetFromFileResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processAssetFromFile:
		((ns1__processAssetFromFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__setProcessingPluginsResponse:
		((ns1__setProcessingPluginsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__setProcessingPlugins:
		((ns1__setProcessingPlugins *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processAssetFromBytesResponse:
		((ns1__processAssetFromBytesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processAssetFromBytes:
		((ns1__processAssetFromBytes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getAuthTokenResponse:
		((ns1__getAuthTokenResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getAuthToken:
		((ns1__getAuthToken *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getRecommendedAssetsResponse:
		((ns1__getRecommendedAssetsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getRecommendedAssets:
		((ns1__getRecommendedAssets *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getSimilarAssetsResponse:
		((ns1__getSimilarAssetsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getSimilarAssets:
		((ns1__getSimilarAssets *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__graphCode:
		((ns1__graphCode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse:
		((ns1__getOrGenerateGraphCodeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getOrGenerateGraphCode:
		((ns1__getOrGenerateGraphCode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__security:
		((ns1__security *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__generalMetadata:
		((ns1__generalMetadata *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__node:
		((ns1__node *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__mmfg:
		((ns1__mmfg *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processAssetFromURLResponse:
		((ns1__processAssetFromURLResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__processAssetFromURL:
		((ns1__processAssetFromURL *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__getSimilarAssets:
		soap_serialize___ns1__getSimilarAssets(soap, (const struct __ns1__getSimilarAssets *)ptr);
		break;
	case SOAP_TYPE___ns1__getRecommendedAssets:
		soap_serialize___ns1__getRecommendedAssets(soap, (const struct __ns1__getRecommendedAssets *)ptr);
		break;
	case SOAP_TYPE___ns1__setProcessingPlugins:
		soap_serialize___ns1__setProcessingPlugins(soap, (const struct __ns1__setProcessingPlugins *)ptr);
		break;
	case SOAP_TYPE___ns1__getOrGenerateGraphCode:
		soap_serialize___ns1__getOrGenerateGraphCode(soap, (const struct __ns1__getOrGenerateGraphCode *)ptr);
		break;
	case SOAP_TYPE___ns1__processAssetFromURL:
		soap_serialize___ns1__processAssetFromURL(soap, (const struct __ns1__processAssetFromURL *)ptr);
		break;
	case SOAP_TYPE___ns1__processAssetFromBytes:
		soap_serialize___ns1__processAssetFromBytes(soap, (const struct __ns1__processAssetFromBytes *)ptr);
		break;
	case SOAP_TYPE___ns1__processAssetFromFile:
		soap_serialize___ns1__processAssetFromFile(soap, (const struct __ns1__processAssetFromFile *)ptr);
		break;
	case SOAP_TYPE___ns1__getCollection:
		soap_serialize___ns1__getCollection(soap, (const struct __ns1__getCollection *)ptr);
		break;
	case SOAP_TYPE___ns1__getAuthToken:
		soap_serialize___ns1__getAuthToken(soap, (const struct __ns1__getAuthToken *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getSimilarAssets:
		soap_serialize_PointerTons1__getSimilarAssets(soap, (ns1__getSimilarAssets *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getRecommendedAssets:
		soap_serialize_PointerTons1__getRecommendedAssets(soap, (ns1__getRecommendedAssets *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__setProcessingPlugins:
		soap_serialize_PointerTons1__setProcessingPlugins(soap, (ns1__setProcessingPlugins *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getOrGenerateGraphCode:
		soap_serialize_PointerTons1__getOrGenerateGraphCode(soap, (ns1__getOrGenerateGraphCode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__processAssetFromURL:
		soap_serialize_PointerTons1__processAssetFromURL(soap, (ns1__processAssetFromURL *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__processAssetFromBytes:
		soap_serialize_PointerTons1__processAssetFromBytes(soap, (ns1__processAssetFromBytes *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__processAssetFromFile:
		soap_serialize_PointerTons1__processAssetFromFile(soap, (ns1__processAssetFromFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getCollection:
		soap_serialize_PointerTons1__getCollection(soap, (ns1__getCollection *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getAuthToken:
		soap_serialize_PointerTons1__getAuthToken(soap, (ns1__getAuthToken *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__graphCode:
		soap_serialize_PointerTons1__graphCode(soap, (ns1__graphCode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodateTime:
		soap_serialize_PointerTodateTime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__security:
		soap_serialize_PointerTons1__security(soap, (ns1__security *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__generalMetadata:
		soap_serialize_PointerTons1__generalMetadata(soap, (ns1__generalMetadata *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__node:
		soap_serialize_PointerTons1__node(soap, (ns1__node *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__mmfg:
		soap_serialize_PointerTons1__mmfg(soap, (ns1__mmfg *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyURI:
		soap_serialize_PointerToxsd__anyURI(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processAssetFromURL:
		return (void*)soap_instantiate_ns1__processAssetFromURL(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processAssetFromURLResponse:
		return (void*)soap_instantiate_ns1__processAssetFromURLResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__mmfg:
		return (void*)soap_instantiate_ns1__mmfg(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__node:
		return (void*)soap_instantiate_ns1__node(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__generalMetadata:
		return (void*)soap_instantiate_ns1__generalMetadata(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__security:
		return (void*)soap_instantiate_ns1__security(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getOrGenerateGraphCode:
		return (void*)soap_instantiate_ns1__getOrGenerateGraphCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse:
		return (void*)soap_instantiate_ns1__getOrGenerateGraphCodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__graphCode:
		return (void*)soap_instantiate_ns1__graphCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getSimilarAssets:
		return (void*)soap_instantiate_ns1__getSimilarAssets(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getSimilarAssetsResponse:
		return (void*)soap_instantiate_ns1__getSimilarAssetsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getRecommendedAssets:
		return (void*)soap_instantiate_ns1__getRecommendedAssets(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getRecommendedAssetsResponse:
		return (void*)soap_instantiate_ns1__getRecommendedAssetsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getAuthToken:
		return (void*)soap_instantiate_ns1__getAuthToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getAuthTokenResponse:
		return (void*)soap_instantiate_ns1__getAuthTokenResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processAssetFromBytes:
		return (void*)soap_instantiate_ns1__processAssetFromBytes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processAssetFromBytesResponse:
		return (void*)soap_instantiate_ns1__processAssetFromBytesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__setProcessingPlugins:
		return (void*)soap_instantiate_ns1__setProcessingPlugins(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__setProcessingPluginsResponse:
		return (void*)soap_instantiate_ns1__setProcessingPluginsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processAssetFromFile:
		return (void*)soap_instantiate_ns1__processAssetFromFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__processAssetFromFileResponse:
		return (void*)soap_instantiate_ns1__processAssetFromFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getCollection:
		return (void*)soap_instantiate_ns1__getCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getCollectionResponse:
		return (void*)soap_instantiate_ns1__getCollectionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getAuthToken:
		return (void*)soap_instantiate___ns1__getAuthToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getCollection:
		return (void*)soap_instantiate___ns1__getCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__processAssetFromFile:
		return (void*)soap_instantiate___ns1__processAssetFromFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__processAssetFromBytes:
		return (void*)soap_instantiate___ns1__processAssetFromBytes(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__processAssetFromURL:
		return (void*)soap_instantiate___ns1__processAssetFromURL(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getOrGenerateGraphCode:
		return (void*)soap_instantiate___ns1__getOrGenerateGraphCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__setProcessingPlugins:
		return (void*)soap_instantiate___ns1__setProcessingPlugins(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getRecommendedAssets:
		return (void*)soap_instantiate___ns1__getRecommendedAssets(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSimilarAssets:
		return (void*)soap_instantiate___ns1__getSimilarAssets(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__mmfg:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__mmfg(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOffloat:
		return (void*)soap_instantiate_std__vectorTemplateOffloat(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__node:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__node(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns1__processAssetFromURL:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processAssetFromURL*>(p->ptr), ns1__processAssetFromURL);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processAssetFromURL*>(p->ptr), ns1__processAssetFromURL);
		break;
	case SOAP_TYPE_ns1__processAssetFromURLResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processAssetFromURLResponse*>(p->ptr), ns1__processAssetFromURLResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processAssetFromURLResponse*>(p->ptr), ns1__processAssetFromURLResponse);
		break;
	case SOAP_TYPE_ns1__mmfg:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__mmfg*>(p->ptr), ns1__mmfg);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__mmfg*>(p->ptr), ns1__mmfg);
		break;
	case SOAP_TYPE_ns1__node:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__node*>(p->ptr), ns1__node);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__node*>(p->ptr), ns1__node);
		break;
	case SOAP_TYPE_ns1__generalMetadata:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__generalMetadata*>(p->ptr), ns1__generalMetadata);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__generalMetadata*>(p->ptr), ns1__generalMetadata);
		break;
	case SOAP_TYPE_ns1__security:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__security*>(p->ptr), ns1__security);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__security*>(p->ptr), ns1__security);
		break;
	case SOAP_TYPE_ns1__getOrGenerateGraphCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getOrGenerateGraphCode*>(p->ptr), ns1__getOrGenerateGraphCode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getOrGenerateGraphCode*>(p->ptr), ns1__getOrGenerateGraphCode);
		break;
	case SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getOrGenerateGraphCodeResponse*>(p->ptr), ns1__getOrGenerateGraphCodeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getOrGenerateGraphCodeResponse*>(p->ptr), ns1__getOrGenerateGraphCodeResponse);
		break;
	case SOAP_TYPE_ns1__graphCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__graphCode*>(p->ptr), ns1__graphCode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__graphCode*>(p->ptr), ns1__graphCode);
		break;
	case SOAP_TYPE_ns1__getSimilarAssets:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getSimilarAssets*>(p->ptr), ns1__getSimilarAssets);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getSimilarAssets*>(p->ptr), ns1__getSimilarAssets);
		break;
	case SOAP_TYPE_ns1__getSimilarAssetsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getSimilarAssetsResponse*>(p->ptr), ns1__getSimilarAssetsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getSimilarAssetsResponse*>(p->ptr), ns1__getSimilarAssetsResponse);
		break;
	case SOAP_TYPE_ns1__getRecommendedAssets:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getRecommendedAssets*>(p->ptr), ns1__getRecommendedAssets);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getRecommendedAssets*>(p->ptr), ns1__getRecommendedAssets);
		break;
	case SOAP_TYPE_ns1__getRecommendedAssetsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getRecommendedAssetsResponse*>(p->ptr), ns1__getRecommendedAssetsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getRecommendedAssetsResponse*>(p->ptr), ns1__getRecommendedAssetsResponse);
		break;
	case SOAP_TYPE_ns1__getAuthToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getAuthToken*>(p->ptr), ns1__getAuthToken);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getAuthToken*>(p->ptr), ns1__getAuthToken);
		break;
	case SOAP_TYPE_ns1__getAuthTokenResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getAuthTokenResponse*>(p->ptr), ns1__getAuthTokenResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getAuthTokenResponse*>(p->ptr), ns1__getAuthTokenResponse);
		break;
	case SOAP_TYPE_ns1__processAssetFromBytes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processAssetFromBytes*>(p->ptr), ns1__processAssetFromBytes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processAssetFromBytes*>(p->ptr), ns1__processAssetFromBytes);
		break;
	case SOAP_TYPE_ns1__processAssetFromBytesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processAssetFromBytesResponse*>(p->ptr), ns1__processAssetFromBytesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processAssetFromBytesResponse*>(p->ptr), ns1__processAssetFromBytesResponse);
		break;
	case SOAP_TYPE_ns1__setProcessingPlugins:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__setProcessingPlugins*>(p->ptr), ns1__setProcessingPlugins);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__setProcessingPlugins*>(p->ptr), ns1__setProcessingPlugins);
		break;
	case SOAP_TYPE_ns1__setProcessingPluginsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__setProcessingPluginsResponse*>(p->ptr), ns1__setProcessingPluginsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__setProcessingPluginsResponse*>(p->ptr), ns1__setProcessingPluginsResponse);
		break;
	case SOAP_TYPE_ns1__processAssetFromFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processAssetFromFile*>(p->ptr), ns1__processAssetFromFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processAssetFromFile*>(p->ptr), ns1__processAssetFromFile);
		break;
	case SOAP_TYPE_ns1__processAssetFromFileResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__processAssetFromFileResponse*>(p->ptr), ns1__processAssetFromFileResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__processAssetFromFileResponse*>(p->ptr), ns1__processAssetFromFileResponse);
		break;
	case SOAP_TYPE_ns1__getCollection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getCollection*>(p->ptr), ns1__getCollection);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getCollection*>(p->ptr), ns1__getCollection);
		break;
	case SOAP_TYPE_ns1__getCollectionResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getCollectionResponse*>(p->ptr), ns1__getCollectionResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getCollectionResponse*>(p->ptr), ns1__getCollectionResponse);
		break;
	case SOAP_TYPE___ns1__getAuthToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getAuthToken*>(p->ptr), struct __ns1__getAuthToken);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getAuthToken*>(p->ptr), struct __ns1__getAuthToken);
		break;
	case SOAP_TYPE___ns1__getCollection:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getCollection*>(p->ptr), struct __ns1__getCollection);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getCollection*>(p->ptr), struct __ns1__getCollection);
		break;
	case SOAP_TYPE___ns1__processAssetFromFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__processAssetFromFile*>(p->ptr), struct __ns1__processAssetFromFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__processAssetFromFile*>(p->ptr), struct __ns1__processAssetFromFile);
		break;
	case SOAP_TYPE___ns1__processAssetFromBytes:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__processAssetFromBytes*>(p->ptr), struct __ns1__processAssetFromBytes);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__processAssetFromBytes*>(p->ptr), struct __ns1__processAssetFromBytes);
		break;
	case SOAP_TYPE___ns1__processAssetFromURL:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__processAssetFromURL*>(p->ptr), struct __ns1__processAssetFromURL);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__processAssetFromURL*>(p->ptr), struct __ns1__processAssetFromURL);
		break;
	case SOAP_TYPE___ns1__getOrGenerateGraphCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getOrGenerateGraphCode*>(p->ptr), struct __ns1__getOrGenerateGraphCode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getOrGenerateGraphCode*>(p->ptr), struct __ns1__getOrGenerateGraphCode);
		break;
	case SOAP_TYPE___ns1__setProcessingPlugins:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__setProcessingPlugins*>(p->ptr), struct __ns1__setProcessingPlugins);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__setProcessingPlugins*>(p->ptr), struct __ns1__setProcessingPlugins);
		break;
	case SOAP_TYPE___ns1__getRecommendedAssets:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getRecommendedAssets*>(p->ptr), struct __ns1__getRecommendedAssets);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getRecommendedAssets*>(p->ptr), struct __ns1__getRecommendedAssets);
		break;
	case SOAP_TYPE___ns1__getSimilarAssets:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getSimilarAssets*>(p->ptr), struct __ns1__getSimilarAssets);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getSimilarAssets*>(p->ptr), struct __ns1__getSimilarAssets);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__mmfg:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__mmfg *> *>(p->ptr), std::vector<ns1__mmfg *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__mmfg *> *>(p->ptr), std::vector<ns1__mmfg *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOffloat:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<float> *>(p->ptr), std::vector<float> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<float> *>(p->ptr), std::vector<float> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__node:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__node *> *>(p->ptr), std::vector<ns1__node *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__node *> *>(p->ptr), std::vector<ns1__node *> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__mmfg:
		if (t == SOAP_TYPE_ns1__mmfg || soap_fbase(t, SOAP_TYPE_ns1__mmfg))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__mmfg *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__mmfg *> *)p)[index] = *(ns1__mmfg **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (t == SOAP_TYPE_std__string)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOffloat:
		if (t == SOAP_TYPE_float)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<float>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<float> *)p)[index] = *(float *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__node:
		if (t == SOAP_TYPE_ns1__node || soap_fbase(t, SOAP_TYPE_ns1__node))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__node *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__node *> *)p)[index] = *(ns1__node **)q;
		}
		break;
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__processAssetFromURL:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processAssetFromURL type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processAssetFromURL*)p = *(ns1__processAssetFromURL*)q;
		break;
	case SOAP_TYPE_ns1__processAssetFromURLResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processAssetFromURLResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processAssetFromURLResponse*)p = *(ns1__processAssetFromURLResponse*)q;
		break;
	case SOAP_TYPE_ns1__mmfg:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__mmfg type=%d location=%p object=%p\n", t, p, q));
		*(ns1__mmfg*)p = *(ns1__mmfg*)q;
		break;
	case SOAP_TYPE_ns1__node:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__node type=%d location=%p object=%p\n", t, p, q));
		*(ns1__node*)p = *(ns1__node*)q;
		break;
	case SOAP_TYPE_ns1__generalMetadata:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__generalMetadata type=%d location=%p object=%p\n", t, p, q));
		*(ns1__generalMetadata*)p = *(ns1__generalMetadata*)q;
		break;
	case SOAP_TYPE_ns1__security:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__security type=%d location=%p object=%p\n", t, p, q));
		*(ns1__security*)p = *(ns1__security*)q;
		break;
	case SOAP_TYPE_ns1__getOrGenerateGraphCode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getOrGenerateGraphCode type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getOrGenerateGraphCode*)p = *(ns1__getOrGenerateGraphCode*)q;
		break;
	case SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getOrGenerateGraphCodeResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getOrGenerateGraphCodeResponse*)p = *(ns1__getOrGenerateGraphCodeResponse*)q;
		break;
	case SOAP_TYPE_ns1__graphCode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__graphCode type=%d location=%p object=%p\n", t, p, q));
		*(ns1__graphCode*)p = *(ns1__graphCode*)q;
		break;
	case SOAP_TYPE_ns1__getSimilarAssets:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getSimilarAssets type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getSimilarAssets*)p = *(ns1__getSimilarAssets*)q;
		break;
	case SOAP_TYPE_ns1__getSimilarAssetsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getSimilarAssetsResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getSimilarAssetsResponse*)p = *(ns1__getSimilarAssetsResponse*)q;
		break;
	case SOAP_TYPE_ns1__getRecommendedAssets:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getRecommendedAssets type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getRecommendedAssets*)p = *(ns1__getRecommendedAssets*)q;
		break;
	case SOAP_TYPE_ns1__getRecommendedAssetsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getRecommendedAssetsResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getRecommendedAssetsResponse*)p = *(ns1__getRecommendedAssetsResponse*)q;
		break;
	case SOAP_TYPE_ns1__getAuthToken:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getAuthToken type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getAuthToken*)p = *(ns1__getAuthToken*)q;
		break;
	case SOAP_TYPE_ns1__getAuthTokenResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getAuthTokenResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getAuthTokenResponse*)p = *(ns1__getAuthTokenResponse*)q;
		break;
	case SOAP_TYPE_ns1__processAssetFromBytes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processAssetFromBytes type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processAssetFromBytes*)p = *(ns1__processAssetFromBytes*)q;
		break;
	case SOAP_TYPE_ns1__processAssetFromBytesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processAssetFromBytesResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processAssetFromBytesResponse*)p = *(ns1__processAssetFromBytesResponse*)q;
		break;
	case SOAP_TYPE_ns1__setProcessingPlugins:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__setProcessingPlugins type=%d location=%p object=%p\n", t, p, q));
		*(ns1__setProcessingPlugins*)p = *(ns1__setProcessingPlugins*)q;
		break;
	case SOAP_TYPE_ns1__setProcessingPluginsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__setProcessingPluginsResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__setProcessingPluginsResponse*)p = *(ns1__setProcessingPluginsResponse*)q;
		break;
	case SOAP_TYPE_ns1__processAssetFromFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processAssetFromFile type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processAssetFromFile*)p = *(ns1__processAssetFromFile*)q;
		break;
	case SOAP_TYPE_ns1__processAssetFromFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__processAssetFromFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__processAssetFromFileResponse*)p = *(ns1__processAssetFromFileResponse*)q;
		break;
	case SOAP_TYPE_ns1__getCollection:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getCollection type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getCollection*)p = *(ns1__getCollection*)q;
		break;
	case SOAP_TYPE_ns1__getCollectionResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getCollectionResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getCollectionResponse*)p = *(ns1__getCollectionResponse*)q;
		break;
	case SOAP_TYPE___ns1__getAuthToken:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getAuthToken type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getAuthToken*)p = *(struct __ns1__getAuthToken*)q;
		break;
	case SOAP_TYPE___ns1__getCollection:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getCollection type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getCollection*)p = *(struct __ns1__getCollection*)q;
		break;
	case SOAP_TYPE___ns1__processAssetFromFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__processAssetFromFile type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__processAssetFromFile*)p = *(struct __ns1__processAssetFromFile*)q;
		break;
	case SOAP_TYPE___ns1__processAssetFromBytes:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__processAssetFromBytes type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__processAssetFromBytes*)p = *(struct __ns1__processAssetFromBytes*)q;
		break;
	case SOAP_TYPE___ns1__processAssetFromURL:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__processAssetFromURL type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__processAssetFromURL*)p = *(struct __ns1__processAssetFromURL*)q;
		break;
	case SOAP_TYPE___ns1__getOrGenerateGraphCode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getOrGenerateGraphCode type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getOrGenerateGraphCode*)p = *(struct __ns1__getOrGenerateGraphCode*)q;
		break;
	case SOAP_TYPE___ns1__setProcessingPlugins:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__setProcessingPlugins type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__setProcessingPlugins*)p = *(struct __ns1__setProcessingPlugins*)q;
		break;
	case SOAP_TYPE___ns1__getRecommendedAssets:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getRecommendedAssets type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getRecommendedAssets*)p = *(struct __ns1__getRecommendedAssets*)q;
		break;
	case SOAP_TYPE___ns1__getSimilarAssets:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getSimilarAssets type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getSimilarAssets*)p = *(struct __ns1__getSimilarAssets*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__anyURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	a = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return a;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n)
{
	LONG64 *a = static_cast<LONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(LONG64)));
	for (LONG64 *p = a; p && n--; ++p)
		soap_default_LONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	if (soap_out_LONG64(soap, tag ? tag : "long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	a = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return a;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n)
{
	float *a = static_cast<float *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(float)));
	for (float *p = a; p && n--; ++p)
		soap_default_float(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	if (soap_out_float(soap, tag ? tag : "float", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getCollectionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__mmfg(soap, &this->ns1__getCollectionResponse::return_);
}

void ns1__getCollectionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__mmfg(soap, &this->ns1__getCollectionResponse::return_);
#endif
}

int ns1__getCollectionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getCollectionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCollectionResponse(struct soap *soap, const char *tag, int id, const ns1__getCollectionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getCollectionResponse), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__mmfg(soap, "return", -1, &a->ns1__getCollectionResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getCollectionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getCollectionResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getCollectionResponse * SOAP_FMAC4 soap_in_ns1__getCollectionResponse(struct soap *soap, const char *tag, ns1__getCollectionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getCollectionResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getCollectionResponse, sizeof(ns1__getCollectionResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getCollectionResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getCollectionResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__mmfg(soap, "return", &a->ns1__getCollectionResponse::return_, "ns1:mmfg"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getCollectionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getCollectionResponse, SOAP_TYPE_ns1__getCollectionResponse, sizeof(ns1__getCollectionResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getCollectionResponse * SOAP_FMAC2 soap_instantiate_ns1__getCollectionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getCollectionResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getCollectionResponse *p;
	size_t k = sizeof(ns1__getCollectionResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getCollectionResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getCollectionResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getCollectionResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getCollectionResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getCollectionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getCollectionResponse(soap, tag ? tag : "ns1:getCollectionResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getCollectionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getCollectionResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getCollectionResponse * SOAP_FMAC4 soap_get_ns1__getCollectionResponse(struct soap *soap, ns1__getCollectionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getCollection::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getCollection::arg0 = NULL;
}

void ns1__getCollection::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__getCollection::arg0);
#endif
}

int ns1__getCollection::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getCollection(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCollection(struct soap *soap, const char *tag, int id, const ns1__getCollection *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getCollection), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__getCollection::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getCollection::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getCollection(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getCollection * SOAP_FMAC4 soap_in_ns1__getCollection(struct soap *soap, const char *tag, ns1__getCollection *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getCollection*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getCollection, sizeof(ns1__getCollection), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getCollection)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getCollection *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__getCollection::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getCollection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getCollection, SOAP_TYPE_ns1__getCollection, sizeof(ns1__getCollection), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getCollection * SOAP_FMAC2 soap_instantiate_ns1__getCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getCollection(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getCollection *p;
	size_t k = sizeof(ns1__getCollection);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getCollection, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getCollection);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getCollection, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getCollection location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getCollection::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getCollection(soap, tag ? tag : "ns1:getCollection", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getCollection::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getCollection(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getCollection * SOAP_FMAC4 soap_get_ns1__getCollection(struct soap *soap, ns1__getCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processAssetFromFileResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__processAssetFromFileResponse::return_ = NULL;
}

void ns1__processAssetFromFileResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__mmfg(soap, &this->ns1__processAssetFromFileResponse::return_);
#endif
}

int ns1__processAssetFromFileResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processAssetFromFileResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromFileResponse(struct soap *soap, const char *tag, int id, const ns1__processAssetFromFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processAssetFromFileResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__mmfg(soap, "return", -1, &a->ns1__processAssetFromFileResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processAssetFromFileResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processAssetFromFileResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processAssetFromFileResponse * SOAP_FMAC4 soap_in_ns1__processAssetFromFileResponse(struct soap *soap, const char *tag, ns1__processAssetFromFileResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processAssetFromFileResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processAssetFromFileResponse, sizeof(ns1__processAssetFromFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processAssetFromFileResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processAssetFromFileResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__mmfg(soap, "return", &a->ns1__processAssetFromFileResponse::return_, "ns1:mmfg"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__processAssetFromFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processAssetFromFileResponse, SOAP_TYPE_ns1__processAssetFromFileResponse, sizeof(ns1__processAssetFromFileResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processAssetFromFileResponse * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processAssetFromFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processAssetFromFileResponse *p;
	size_t k = sizeof(ns1__processAssetFromFileResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processAssetFromFileResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processAssetFromFileResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processAssetFromFileResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processAssetFromFileResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processAssetFromFileResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processAssetFromFileResponse(soap, tag ? tag : "ns1:processAssetFromFileResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processAssetFromFileResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processAssetFromFileResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processAssetFromFileResponse * SOAP_FMAC4 soap_get_ns1__processAssetFromFileResponse(struct soap *soap, ns1__processAssetFromFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processAssetFromFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processAssetFromFile::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__processAssetFromFile::arg0 = NULL;
	this->ns1__processAssetFromFile::arg1 = NULL;
}

void ns1__processAssetFromFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__processAssetFromFile::arg0);
	soap_serialize_PointerTostd__string(soap, &this->ns1__processAssetFromFile::arg1);
#endif
}

int ns1__processAssetFromFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processAssetFromFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromFile(struct soap *soap, const char *tag, int id, const ns1__processAssetFromFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processAssetFromFile), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__processAssetFromFile::arg0, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg1", -1, &a->ns1__processAssetFromFile::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processAssetFromFile::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processAssetFromFile(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processAssetFromFile * SOAP_FMAC4 soap_in_ns1__processAssetFromFile(struct soap *soap, const char *tag, ns1__processAssetFromFile *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processAssetFromFile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processAssetFromFile, sizeof(ns1__processAssetFromFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processAssetFromFile)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processAssetFromFile *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__processAssetFromFile::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg1", &a->ns1__processAssetFromFile::arg1, "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__processAssetFromFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processAssetFromFile, SOAP_TYPE_ns1__processAssetFromFile, sizeof(ns1__processAssetFromFile), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processAssetFromFile * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processAssetFromFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processAssetFromFile *p;
	size_t k = sizeof(ns1__processAssetFromFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processAssetFromFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processAssetFromFile);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processAssetFromFile, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processAssetFromFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processAssetFromFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processAssetFromFile(soap, tag ? tag : "ns1:processAssetFromFile", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processAssetFromFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processAssetFromFile(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processAssetFromFile * SOAP_FMAC4 soap_get_ns1__processAssetFromFile(struct soap *soap, ns1__processAssetFromFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processAssetFromFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__setProcessingPluginsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void ns1__setProcessingPluginsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__setProcessingPluginsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__setProcessingPluginsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setProcessingPluginsResponse(struct soap *soap, const char *tag, int id, const ns1__setProcessingPluginsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__setProcessingPluginsResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__setProcessingPluginsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__setProcessingPluginsResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__setProcessingPluginsResponse * SOAP_FMAC4 soap_in_ns1__setProcessingPluginsResponse(struct soap *soap, const char *tag, ns1__setProcessingPluginsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__setProcessingPluginsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__setProcessingPluginsResponse, sizeof(ns1__setProcessingPluginsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__setProcessingPluginsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__setProcessingPluginsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__setProcessingPluginsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__setProcessingPluginsResponse, SOAP_TYPE_ns1__setProcessingPluginsResponse, sizeof(ns1__setProcessingPluginsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__setProcessingPluginsResponse * SOAP_FMAC2 soap_instantiate_ns1__setProcessingPluginsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__setProcessingPluginsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__setProcessingPluginsResponse *p;
	size_t k = sizeof(ns1__setProcessingPluginsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__setProcessingPluginsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__setProcessingPluginsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__setProcessingPluginsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__setProcessingPluginsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__setProcessingPluginsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__setProcessingPluginsResponse(soap, tag ? tag : "ns1:setProcessingPluginsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__setProcessingPluginsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__setProcessingPluginsResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__setProcessingPluginsResponse * SOAP_FMAC4 soap_get_ns1__setProcessingPluginsResponse(struct soap *soap, ns1__setProcessingPluginsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__setProcessingPluginsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__setProcessingPlugins::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__setProcessingPlugins::arg0 = NULL;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns1__setProcessingPlugins::arg1);
}

void ns1__setProcessingPlugins::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__setProcessingPlugins::arg0);
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns1__setProcessingPlugins::arg1);
#endif
}

int ns1__setProcessingPlugins::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__setProcessingPlugins(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setProcessingPlugins(struct soap *soap, const char *tag, int id, const ns1__setProcessingPlugins *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__setProcessingPlugins), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__setProcessingPlugins::arg0, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "arg1", -1, &a->ns1__setProcessingPlugins::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__setProcessingPlugins::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__setProcessingPlugins(soap, tag, this, type);
}

SOAP_FMAC3 ns1__setProcessingPlugins * SOAP_FMAC4 soap_in_ns1__setProcessingPlugins(struct soap *soap, const char *tag, ns1__setProcessingPlugins *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__setProcessingPlugins*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__setProcessingPlugins, sizeof(ns1__setProcessingPlugins), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__setProcessingPlugins)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__setProcessingPlugins *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__setProcessingPlugins::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__string(soap, "arg1", &a->ns1__setProcessingPlugins::arg1, "xsd:string"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__setProcessingPlugins *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__setProcessingPlugins, SOAP_TYPE_ns1__setProcessingPlugins, sizeof(ns1__setProcessingPlugins), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__setProcessingPlugins * SOAP_FMAC2 soap_instantiate_ns1__setProcessingPlugins(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__setProcessingPlugins(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__setProcessingPlugins *p;
	size_t k = sizeof(ns1__setProcessingPlugins);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__setProcessingPlugins, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__setProcessingPlugins);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__setProcessingPlugins, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__setProcessingPlugins location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__setProcessingPlugins::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__setProcessingPlugins(soap, tag ? tag : "ns1:setProcessingPlugins", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__setProcessingPlugins::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__setProcessingPlugins(soap, this, tag, type);
}

SOAP_FMAC3 ns1__setProcessingPlugins * SOAP_FMAC4 soap_get_ns1__setProcessingPlugins(struct soap *soap, ns1__setProcessingPlugins *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__setProcessingPlugins(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processAssetFromBytesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__processAssetFromBytesResponse::return_ = NULL;
}

void ns1__processAssetFromBytesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__mmfg(soap, &this->ns1__processAssetFromBytesResponse::return_);
#endif
}

int ns1__processAssetFromBytesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processAssetFromBytesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromBytesResponse(struct soap *soap, const char *tag, int id, const ns1__processAssetFromBytesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processAssetFromBytesResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__mmfg(soap, "return", -1, &a->ns1__processAssetFromBytesResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processAssetFromBytesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processAssetFromBytesResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processAssetFromBytesResponse * SOAP_FMAC4 soap_in_ns1__processAssetFromBytesResponse(struct soap *soap, const char *tag, ns1__processAssetFromBytesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processAssetFromBytesResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processAssetFromBytesResponse, sizeof(ns1__processAssetFromBytesResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processAssetFromBytesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processAssetFromBytesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__mmfg(soap, "return", &a->ns1__processAssetFromBytesResponse::return_, "ns1:mmfg"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__processAssetFromBytesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processAssetFromBytesResponse, SOAP_TYPE_ns1__processAssetFromBytesResponse, sizeof(ns1__processAssetFromBytesResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processAssetFromBytesResponse * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromBytesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processAssetFromBytesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processAssetFromBytesResponse *p;
	size_t k = sizeof(ns1__processAssetFromBytesResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processAssetFromBytesResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processAssetFromBytesResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processAssetFromBytesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processAssetFromBytesResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processAssetFromBytesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processAssetFromBytesResponse(soap, tag ? tag : "ns1:processAssetFromBytesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processAssetFromBytesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processAssetFromBytesResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processAssetFromBytesResponse * SOAP_FMAC4 soap_get_ns1__processAssetFromBytesResponse(struct soap *soap, ns1__processAssetFromBytesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processAssetFromBytesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processAssetFromBytes::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__processAssetFromBytes::arg0 = NULL;
	this->ns1__processAssetFromBytes::arg1 = NULL;
	this->ns1__processAssetFromBytes::arg2 = NULL;
}

void ns1__processAssetFromBytes::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__processAssetFromBytes::arg0);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__processAssetFromBytes::arg1);
	soap_serialize_PointerTostd__string(soap, &this->ns1__processAssetFromBytes::arg2);
#endif
}

int ns1__processAssetFromBytes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processAssetFromBytes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromBytes(struct soap *soap, const char *tag, int id, const ns1__processAssetFromBytes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processAssetFromBytes), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__processAssetFromBytes::arg0, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "arg1", -1, &a->ns1__processAssetFromBytes::arg1, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg2", -1, &a->ns1__processAssetFromBytes::arg2, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processAssetFromBytes::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processAssetFromBytes(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processAssetFromBytes * SOAP_FMAC4 soap_in_ns1__processAssetFromBytes(struct soap *soap, const char *tag, ns1__processAssetFromBytes *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processAssetFromBytes*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processAssetFromBytes, sizeof(ns1__processAssetFromBytes), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processAssetFromBytes)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processAssetFromBytes *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	size_t soap_flag_arg21 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__processAssetFromBytes::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "arg1", &a->ns1__processAssetFromBytes::arg1, "xsd:base64Binary"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap_flag_arg21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg2", &a->ns1__processAssetFromBytes::arg2, "xsd:string"))
				{	soap_flag_arg21--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__processAssetFromBytes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processAssetFromBytes, SOAP_TYPE_ns1__processAssetFromBytes, sizeof(ns1__processAssetFromBytes), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processAssetFromBytes * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromBytes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processAssetFromBytes(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processAssetFromBytes *p;
	size_t k = sizeof(ns1__processAssetFromBytes);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processAssetFromBytes, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processAssetFromBytes);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processAssetFromBytes, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processAssetFromBytes location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processAssetFromBytes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processAssetFromBytes(soap, tag ? tag : "ns1:processAssetFromBytes", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processAssetFromBytes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processAssetFromBytes(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processAssetFromBytes * SOAP_FMAC4 soap_get_ns1__processAssetFromBytes(struct soap *soap, ns1__processAssetFromBytes *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processAssetFromBytes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getAuthTokenResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getAuthTokenResponse::return_ = NULL;
}

void ns1__getAuthTokenResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__getAuthTokenResponse::return_);
#endif
}

int ns1__getAuthTokenResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getAuthTokenResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAuthTokenResponse(struct soap *soap, const char *tag, int id, const ns1__getAuthTokenResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getAuthTokenResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "return", -1, &a->ns1__getAuthTokenResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getAuthTokenResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getAuthTokenResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getAuthTokenResponse * SOAP_FMAC4 soap_in_ns1__getAuthTokenResponse(struct soap *soap, const char *tag, ns1__getAuthTokenResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getAuthTokenResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getAuthTokenResponse, sizeof(ns1__getAuthTokenResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getAuthTokenResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getAuthTokenResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "return", &a->ns1__getAuthTokenResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getAuthTokenResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getAuthTokenResponse, SOAP_TYPE_ns1__getAuthTokenResponse, sizeof(ns1__getAuthTokenResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getAuthTokenResponse * SOAP_FMAC2 soap_instantiate_ns1__getAuthTokenResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getAuthTokenResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getAuthTokenResponse *p;
	size_t k = sizeof(ns1__getAuthTokenResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getAuthTokenResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getAuthTokenResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getAuthTokenResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getAuthTokenResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getAuthTokenResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getAuthTokenResponse(soap, tag ? tag : "ns1:getAuthTokenResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getAuthTokenResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getAuthTokenResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getAuthTokenResponse * SOAP_FMAC4 soap_get_ns1__getAuthTokenResponse(struct soap *soap, ns1__getAuthTokenResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getAuthTokenResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getAuthToken::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getAuthToken::arg0 = NULL;
}

void ns1__getAuthToken::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__getAuthToken::arg0);
#endif
}

int ns1__getAuthToken::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getAuthToken(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAuthToken(struct soap *soap, const char *tag, int id, const ns1__getAuthToken *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getAuthToken), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__getAuthToken::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getAuthToken::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getAuthToken(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getAuthToken * SOAP_FMAC4 soap_in_ns1__getAuthToken(struct soap *soap, const char *tag, ns1__getAuthToken *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getAuthToken*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getAuthToken, sizeof(ns1__getAuthToken), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getAuthToken)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getAuthToken *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__getAuthToken::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getAuthToken *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getAuthToken, SOAP_TYPE_ns1__getAuthToken, sizeof(ns1__getAuthToken), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getAuthToken * SOAP_FMAC2 soap_instantiate_ns1__getAuthToken(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getAuthToken(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getAuthToken *p;
	size_t k = sizeof(ns1__getAuthToken);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getAuthToken, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getAuthToken);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getAuthToken, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getAuthToken location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getAuthToken::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getAuthToken(soap, tag ? tag : "ns1:getAuthToken", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getAuthToken::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getAuthToken(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getAuthToken * SOAP_FMAC4 soap_get_ns1__getAuthToken(struct soap *soap, ns1__getAuthToken *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getAuthToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getRecommendedAssetsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__mmfg(soap, &this->ns1__getRecommendedAssetsResponse::return_);
}

void ns1__getRecommendedAssetsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__mmfg(soap, &this->ns1__getRecommendedAssetsResponse::return_);
#endif
}

int ns1__getRecommendedAssetsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getRecommendedAssetsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRecommendedAssetsResponse(struct soap *soap, const char *tag, int id, const ns1__getRecommendedAssetsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getRecommendedAssetsResponse), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__mmfg(soap, "return", -1, &a->ns1__getRecommendedAssetsResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getRecommendedAssetsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getRecommendedAssetsResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getRecommendedAssetsResponse * SOAP_FMAC4 soap_in_ns1__getRecommendedAssetsResponse(struct soap *soap, const char *tag, ns1__getRecommendedAssetsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getRecommendedAssetsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getRecommendedAssetsResponse, sizeof(ns1__getRecommendedAssetsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getRecommendedAssetsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getRecommendedAssetsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__mmfg(soap, "return", &a->ns1__getRecommendedAssetsResponse::return_, "ns1:mmfg"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getRecommendedAssetsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getRecommendedAssetsResponse, SOAP_TYPE_ns1__getRecommendedAssetsResponse, sizeof(ns1__getRecommendedAssetsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getRecommendedAssetsResponse * SOAP_FMAC2 soap_instantiate_ns1__getRecommendedAssetsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getRecommendedAssetsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getRecommendedAssetsResponse *p;
	size_t k = sizeof(ns1__getRecommendedAssetsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getRecommendedAssetsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getRecommendedAssetsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getRecommendedAssetsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getRecommendedAssetsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getRecommendedAssetsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getRecommendedAssetsResponse(soap, tag ? tag : "ns1:getRecommendedAssetsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getRecommendedAssetsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getRecommendedAssetsResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getRecommendedAssetsResponse * SOAP_FMAC4 soap_get_ns1__getRecommendedAssetsResponse(struct soap *soap, ns1__getRecommendedAssetsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getRecommendedAssetsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getRecommendedAssets::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getRecommendedAssets::arg0 = NULL;
	this->ns1__getRecommendedAssets::arg1 = NULL;
}

void ns1__getRecommendedAssets::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__getRecommendedAssets::arg0);
	soap_serialize_PointerTons1__graphCode(soap, &this->ns1__getRecommendedAssets::arg1);
#endif
}

int ns1__getRecommendedAssets::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getRecommendedAssets(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRecommendedAssets(struct soap *soap, const char *tag, int id, const ns1__getRecommendedAssets *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getRecommendedAssets), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__getRecommendedAssets::arg0, ""))
		return soap->error;
	if (soap_out_PointerTons1__graphCode(soap, "arg1", -1, &a->ns1__getRecommendedAssets::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getRecommendedAssets::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getRecommendedAssets(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getRecommendedAssets * SOAP_FMAC4 soap_in_ns1__getRecommendedAssets(struct soap *soap, const char *tag, ns1__getRecommendedAssets *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getRecommendedAssets*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getRecommendedAssets, sizeof(ns1__getRecommendedAssets), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getRecommendedAssets)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getRecommendedAssets *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__getRecommendedAssets::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__graphCode(soap, "arg1", &a->ns1__getRecommendedAssets::arg1, "ns1:graphCode"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getRecommendedAssets *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getRecommendedAssets, SOAP_TYPE_ns1__getRecommendedAssets, sizeof(ns1__getRecommendedAssets), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getRecommendedAssets * SOAP_FMAC2 soap_instantiate_ns1__getRecommendedAssets(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getRecommendedAssets(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getRecommendedAssets *p;
	size_t k = sizeof(ns1__getRecommendedAssets);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getRecommendedAssets, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getRecommendedAssets);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getRecommendedAssets, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getRecommendedAssets location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getRecommendedAssets::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getRecommendedAssets(soap, tag ? tag : "ns1:getRecommendedAssets", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getRecommendedAssets::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getRecommendedAssets(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getRecommendedAssets * SOAP_FMAC4 soap_get_ns1__getRecommendedAssets(struct soap *soap, ns1__getRecommendedAssets *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getRecommendedAssets(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getSimilarAssetsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__mmfg(soap, &this->ns1__getSimilarAssetsResponse::return_);
}

void ns1__getSimilarAssetsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__mmfg(soap, &this->ns1__getSimilarAssetsResponse::return_);
#endif
}

int ns1__getSimilarAssetsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getSimilarAssetsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getSimilarAssetsResponse(struct soap *soap, const char *tag, int id, const ns1__getSimilarAssetsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getSimilarAssetsResponse), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__mmfg(soap, "return", -1, &a->ns1__getSimilarAssetsResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getSimilarAssetsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getSimilarAssetsResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getSimilarAssetsResponse * SOAP_FMAC4 soap_in_ns1__getSimilarAssetsResponse(struct soap *soap, const char *tag, ns1__getSimilarAssetsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getSimilarAssetsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getSimilarAssetsResponse, sizeof(ns1__getSimilarAssetsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getSimilarAssetsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getSimilarAssetsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__mmfg(soap, "return", &a->ns1__getSimilarAssetsResponse::return_, "ns1:mmfg"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getSimilarAssetsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getSimilarAssetsResponse, SOAP_TYPE_ns1__getSimilarAssetsResponse, sizeof(ns1__getSimilarAssetsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getSimilarAssetsResponse * SOAP_FMAC2 soap_instantiate_ns1__getSimilarAssetsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getSimilarAssetsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getSimilarAssetsResponse *p;
	size_t k = sizeof(ns1__getSimilarAssetsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getSimilarAssetsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getSimilarAssetsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getSimilarAssetsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getSimilarAssetsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getSimilarAssetsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getSimilarAssetsResponse(soap, tag ? tag : "ns1:getSimilarAssetsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getSimilarAssetsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getSimilarAssetsResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getSimilarAssetsResponse * SOAP_FMAC4 soap_get_ns1__getSimilarAssetsResponse(struct soap *soap, ns1__getSimilarAssetsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getSimilarAssetsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getSimilarAssets::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getSimilarAssets::arg0 = NULL;
	this->ns1__getSimilarAssets::arg1 = NULL;
}

void ns1__getSimilarAssets::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__getSimilarAssets::arg0);
	soap_serialize_PointerTons1__graphCode(soap, &this->ns1__getSimilarAssets::arg1);
#endif
}

int ns1__getSimilarAssets::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getSimilarAssets(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getSimilarAssets(struct soap *soap, const char *tag, int id, const ns1__getSimilarAssets *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getSimilarAssets), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__getSimilarAssets::arg0, ""))
		return soap->error;
	if (soap_out_PointerTons1__graphCode(soap, "arg1", -1, &a->ns1__getSimilarAssets::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getSimilarAssets::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getSimilarAssets(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getSimilarAssets * SOAP_FMAC4 soap_in_ns1__getSimilarAssets(struct soap *soap, const char *tag, ns1__getSimilarAssets *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getSimilarAssets*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getSimilarAssets, sizeof(ns1__getSimilarAssets), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getSimilarAssets)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getSimilarAssets *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__getSimilarAssets::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__graphCode(soap, "arg1", &a->ns1__getSimilarAssets::arg1, "ns1:graphCode"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getSimilarAssets *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getSimilarAssets, SOAP_TYPE_ns1__getSimilarAssets, sizeof(ns1__getSimilarAssets), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getSimilarAssets * SOAP_FMAC2 soap_instantiate_ns1__getSimilarAssets(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getSimilarAssets(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getSimilarAssets *p;
	size_t k = sizeof(ns1__getSimilarAssets);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getSimilarAssets, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getSimilarAssets);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getSimilarAssets, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getSimilarAssets location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getSimilarAssets::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getSimilarAssets(soap, tag ? tag : "ns1:getSimilarAssets", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getSimilarAssets::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getSimilarAssets(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getSimilarAssets * SOAP_FMAC4 soap_get_ns1__getSimilarAssets(struct soap *soap, ns1__getSimilarAssets *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getSimilarAssets(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__graphCode::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns1__graphCode::dictionary);
}

void ns1__graphCode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns1__graphCode::dictionary);
#endif
}

int ns1__graphCode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__graphCode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__graphCode(struct soap *soap, const char *tag, int id, const ns1__graphCode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__graphCode), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "dictionary", -1, &a->ns1__graphCode::dictionary, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__graphCode::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__graphCode(soap, tag, this, type);
}

SOAP_FMAC3 ns1__graphCode * SOAP_FMAC4 soap_in_ns1__graphCode(struct soap *soap, const char *tag, ns1__graphCode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__graphCode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__graphCode, sizeof(ns1__graphCode), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__graphCode)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__graphCode *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__string(soap, "dictionary", &a->ns1__graphCode::dictionary, "xsd:string"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__graphCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__graphCode, SOAP_TYPE_ns1__graphCode, sizeof(ns1__graphCode), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__graphCode * SOAP_FMAC2 soap_instantiate_ns1__graphCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__graphCode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__graphCode *p;
	size_t k = sizeof(ns1__graphCode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__graphCode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__graphCode);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__graphCode, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__graphCode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__graphCode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__graphCode(soap, tag ? tag : "ns1:graphCode", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__graphCode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__graphCode(soap, this, tag, type);
}

SOAP_FMAC3 ns1__graphCode * SOAP_FMAC4 soap_get_ns1__graphCode(struct soap *soap, ns1__graphCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__graphCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getOrGenerateGraphCodeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getOrGenerateGraphCodeResponse::return_ = NULL;
}

void ns1__getOrGenerateGraphCodeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__graphCode(soap, &this->ns1__getOrGenerateGraphCodeResponse::return_);
#endif
}

int ns1__getOrGenerateGraphCodeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getOrGenerateGraphCodeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, const char *tag, int id, const ns1__getOrGenerateGraphCodeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__graphCode(soap, "return", -1, &a->ns1__getOrGenerateGraphCodeResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getOrGenerateGraphCodeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getOrGenerateGraphCodeResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getOrGenerateGraphCodeResponse * SOAP_FMAC4 soap_in_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, const char *tag, ns1__getOrGenerateGraphCodeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getOrGenerateGraphCodeResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse, sizeof(ns1__getOrGenerateGraphCodeResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getOrGenerateGraphCodeResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__graphCode(soap, "return", &a->ns1__getOrGenerateGraphCodeResponse::return_, "ns1:graphCode"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getOrGenerateGraphCodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse, SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse, sizeof(ns1__getOrGenerateGraphCodeResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getOrGenerateGraphCodeResponse * SOAP_FMAC2 soap_instantiate_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getOrGenerateGraphCodeResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getOrGenerateGraphCodeResponse *p;
	size_t k = sizeof(ns1__getOrGenerateGraphCodeResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getOrGenerateGraphCodeResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getOrGenerateGraphCodeResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getOrGenerateGraphCodeResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getOrGenerateGraphCodeResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getOrGenerateGraphCodeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getOrGenerateGraphCodeResponse(soap, tag ? tag : "ns1:getOrGenerateGraphCodeResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getOrGenerateGraphCodeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getOrGenerateGraphCodeResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getOrGenerateGraphCodeResponse * SOAP_FMAC4 soap_get_ns1__getOrGenerateGraphCodeResponse(struct soap *soap, ns1__getOrGenerateGraphCodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getOrGenerateGraphCodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getOrGenerateGraphCode::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getOrGenerateGraphCode::arg0 = NULL;
	this->ns1__getOrGenerateGraphCode::arg1 = NULL;
}

void ns1__getOrGenerateGraphCode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__getOrGenerateGraphCode::arg0);
	soap_serialize_PointerTons1__mmfg(soap, &this->ns1__getOrGenerateGraphCode::arg1);
#endif
}

int ns1__getOrGenerateGraphCode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getOrGenerateGraphCode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getOrGenerateGraphCode(struct soap *soap, const char *tag, int id, const ns1__getOrGenerateGraphCode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getOrGenerateGraphCode), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__getOrGenerateGraphCode::arg0, ""))
		return soap->error;
	if (soap_out_PointerTons1__mmfg(soap, "arg1", -1, &a->ns1__getOrGenerateGraphCode::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getOrGenerateGraphCode::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__getOrGenerateGraphCode(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getOrGenerateGraphCode * SOAP_FMAC4 soap_in_ns1__getOrGenerateGraphCode(struct soap *soap, const char *tag, ns1__getOrGenerateGraphCode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getOrGenerateGraphCode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getOrGenerateGraphCode, sizeof(ns1__getOrGenerateGraphCode), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getOrGenerateGraphCode)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getOrGenerateGraphCode *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__getOrGenerateGraphCode::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__mmfg(soap, "arg1", &a->ns1__getOrGenerateGraphCode::arg1, "ns1:mmfg"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getOrGenerateGraphCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getOrGenerateGraphCode, SOAP_TYPE_ns1__getOrGenerateGraphCode, sizeof(ns1__getOrGenerateGraphCode), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getOrGenerateGraphCode * SOAP_FMAC2 soap_instantiate_ns1__getOrGenerateGraphCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getOrGenerateGraphCode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getOrGenerateGraphCode *p;
	size_t k = sizeof(ns1__getOrGenerateGraphCode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getOrGenerateGraphCode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getOrGenerateGraphCode);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getOrGenerateGraphCode, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getOrGenerateGraphCode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getOrGenerateGraphCode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getOrGenerateGraphCode(soap, tag ? tag : "ns1:getOrGenerateGraphCode", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getOrGenerateGraphCode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getOrGenerateGraphCode(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getOrGenerateGraphCode * SOAP_FMAC4 soap_get_ns1__getOrGenerateGraphCode(struct soap *soap, ns1__getOrGenerateGraphCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getOrGenerateGraphCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__security::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__security::acl = NULL;
	this->ns1__security::group_USCOREid = NULL;
	this->ns1__security::owner_USCOREid = NULL;
}

void ns1__security::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__security::acl);
	soap_serialize_PointerTostd__string(soap, &this->ns1__security::group_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->ns1__security::owner_USCOREid);
#endif
}

int ns1__security::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__security(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__security(struct soap *soap, const char *tag, int id, const ns1__security *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__security), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "acl", -1, &a->ns1__security::acl, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "group_id", -1, &a->ns1__security::group_USCOREid, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "owner_id", -1, &a->ns1__security::owner_USCOREid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__security::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__security(soap, tag, this, type);
}

SOAP_FMAC3 ns1__security * SOAP_FMAC4 soap_in_ns1__security(struct soap *soap, const char *tag, ns1__security *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__security*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__security, sizeof(ns1__security), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__security)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__security *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_acl1 = 1;
	size_t soap_flag_group_USCOREid1 = 1;
	size_t soap_flag_owner_USCOREid1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_acl1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "acl", &a->ns1__security::acl, "xsd:string"))
				{	soap_flag_acl1--;
					continue;
				}
			}
			if (soap_flag_group_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "group_id", &a->ns1__security::group_USCOREid, "xsd:string"))
				{	soap_flag_group_USCOREid1--;
					continue;
				}
			}
			if (soap_flag_owner_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "owner_id", &a->ns1__security::owner_USCOREid, "xsd:string"))
				{	soap_flag_owner_USCOREid1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__security *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__security, SOAP_TYPE_ns1__security, sizeof(ns1__security), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__security * SOAP_FMAC2 soap_instantiate_ns1__security(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__security(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__security *p;
	size_t k = sizeof(ns1__security);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__security, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__security);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__security, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__security location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__security::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__security(soap, tag ? tag : "ns1:security", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__security::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__security(soap, this, tag, type);
}

SOAP_FMAC3 ns1__security * SOAP_FMAC4 soap_get_ns1__security(struct soap *soap, ns1__security *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__security(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__generalMetadata::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_float(soap, &this->ns1__generalMetadata::aperture);
	this->ns1__generalMetadata::cameraModel = NULL;
	this->ns1__generalMetadata::cityNearBy = NULL;
	this->ns1__generalMetadata::date = NULL;
	soap_default_float(soap, &this->ns1__generalMetadata::exposure);
	this->ns1__generalMetadata::fileName = NULL;
	this->ns1__generalMetadata::fileReference = NULL;
	soap_default_LONG64(soap, &this->ns1__generalMetadata::fileSize);
	soap_default_LONG64(soap, &this->ns1__generalMetadata::focalLength);
	soap_default_int(soap, &this->ns1__generalMetadata::height);
	this->ns1__generalMetadata::id = NULL;
	soap_default_int(soap, &this->ns1__generalMetadata::iso);
	soap_default_LONG64(soap, &this->ns1__generalMetadata::latitude);
	this->ns1__generalMetadata::lensModel = NULL;
	soap_default_LONG64(soap, &this->ns1__generalMetadata::longitude);
	soap_default_int(soap, &this->ns1__generalMetadata::resolution);
	soap_default_LONG64(soap, &this->ns1__generalMetadata::shutterSpeed);
	soap_default_int(soap, &this->ns1__generalMetadata::width);
}

void ns1__generalMetadata::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__generalMetadata::cameraModel);
	soap_serialize_PointerTostd__string(soap, &this->ns1__generalMetadata::cityNearBy);
	soap_serialize_PointerTodateTime(soap, &this->ns1__generalMetadata::date);
	soap_serialize_PointerTostd__string(soap, &this->ns1__generalMetadata::fileName);
	soap_serialize_PointerTostd__string(soap, &this->ns1__generalMetadata::fileReference);
	soap_serialize_PointerTostd__string(soap, &this->ns1__generalMetadata::id);
	soap_serialize_PointerTostd__string(soap, &this->ns1__generalMetadata::lensModel);
#endif
}

int ns1__generalMetadata::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__generalMetadata(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__generalMetadata(struct soap *soap, const char *tag, int id, const ns1__generalMetadata *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__generalMetadata), type))
		return soap->error;
	if (soap_out_float(soap, "aperture", -1, &a->ns1__generalMetadata::aperture, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "cameraModel", -1, &a->ns1__generalMetadata::cameraModel, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "cityNearBy", -1, &a->ns1__generalMetadata::cityNearBy, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "date", -1, &a->ns1__generalMetadata::date, ""))
		return soap->error;
	if (soap_out_float(soap, "exposure", -1, &a->ns1__generalMetadata::exposure, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "fileName", -1, &a->ns1__generalMetadata::fileName, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "fileReference", -1, &a->ns1__generalMetadata::fileReference, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "fileSize", -1, &a->ns1__generalMetadata::fileSize, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "focalLength", -1, &a->ns1__generalMetadata::focalLength, ""))
		return soap->error;
	if (soap_out_int(soap, "height", -1, &a->ns1__generalMetadata::height, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "id", -1, &a->ns1__generalMetadata::id, ""))
		return soap->error;
	if (soap_out_int(soap, "iso", -1, &a->ns1__generalMetadata::iso, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "latitude", -1, &a->ns1__generalMetadata::latitude, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "lensModel", -1, &a->ns1__generalMetadata::lensModel, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "longitude", -1, &a->ns1__generalMetadata::longitude, ""))
		return soap->error;
	if (soap_out_int(soap, "resolution", -1, &a->ns1__generalMetadata::resolution, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "shutterSpeed", -1, &a->ns1__generalMetadata::shutterSpeed, ""))
		return soap->error;
	if (soap_out_int(soap, "width", -1, &a->ns1__generalMetadata::width, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__generalMetadata::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__generalMetadata(soap, tag, this, type);
}

SOAP_FMAC3 ns1__generalMetadata * SOAP_FMAC4 soap_in_ns1__generalMetadata(struct soap *soap, const char *tag, ns1__generalMetadata *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__generalMetadata*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__generalMetadata, sizeof(ns1__generalMetadata), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__generalMetadata)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__generalMetadata *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_aperture1 = 1;
	size_t soap_flag_cameraModel1 = 1;
	size_t soap_flag_cityNearBy1 = 1;
	size_t soap_flag_date1 = 1;
	size_t soap_flag_exposure1 = 1;
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_fileReference1 = 1;
	size_t soap_flag_fileSize1 = 1;
	size_t soap_flag_focalLength1 = 1;
	size_t soap_flag_height1 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_iso1 = 1;
	size_t soap_flag_latitude1 = 1;
	size_t soap_flag_lensModel1 = 1;
	size_t soap_flag_longitude1 = 1;
	size_t soap_flag_resolution1 = 1;
	size_t soap_flag_shutterSpeed1 = 1;
	size_t soap_flag_width1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_aperture1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_float(soap, "aperture", &a->ns1__generalMetadata::aperture, "xsd:float"))
				{	soap_flag_aperture1--;
					continue;
				}
			}
			if (soap_flag_cameraModel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "cameraModel", &a->ns1__generalMetadata::cameraModel, "xsd:string"))
				{	soap_flag_cameraModel1--;
					continue;
				}
			}
			if (soap_flag_cityNearBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "cityNearBy", &a->ns1__generalMetadata::cityNearBy, "xsd:string"))
				{	soap_flag_cityNearBy1--;
					continue;
				}
			}
			if (soap_flag_date1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "date", &a->ns1__generalMetadata::date, "xsd:dateTime"))
				{	soap_flag_date1--;
					continue;
				}
			}
			if (soap_flag_exposure1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_float(soap, "exposure", &a->ns1__generalMetadata::exposure, "xsd:float"))
				{	soap_flag_exposure1--;
					continue;
				}
			}
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "fileName", &a->ns1__generalMetadata::fileName, "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			}
			if (soap_flag_fileReference1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "fileReference", &a->ns1__generalMetadata::fileReference, "xsd:string"))
				{	soap_flag_fileReference1--;
					continue;
				}
			}
			if (soap_flag_fileSize1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_LONG64(soap, "fileSize", &a->ns1__generalMetadata::fileSize, "xsd:long"))
				{	soap_flag_fileSize1--;
					continue;
				}
			}
			if (soap_flag_focalLength1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_LONG64(soap, "focalLength", &a->ns1__generalMetadata::focalLength, "xsd:long"))
				{	soap_flag_focalLength1--;
					continue;
				}
			}
			if (soap_flag_height1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "height", &a->ns1__generalMetadata::height, "xsd:int"))
				{	soap_flag_height1--;
					continue;
				}
			}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "id", &a->ns1__generalMetadata::id, "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			}
			if (soap_flag_iso1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "iso", &a->ns1__generalMetadata::iso, "xsd:int"))
				{	soap_flag_iso1--;
					continue;
				}
			}
			if (soap_flag_latitude1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_LONG64(soap, "latitude", &a->ns1__generalMetadata::latitude, "xsd:long"))
				{	soap_flag_latitude1--;
					continue;
				}
			}
			if (soap_flag_lensModel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "lensModel", &a->ns1__generalMetadata::lensModel, "xsd:string"))
				{	soap_flag_lensModel1--;
					continue;
				}
			}
			if (soap_flag_longitude1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_LONG64(soap, "longitude", &a->ns1__generalMetadata::longitude, "xsd:long"))
				{	soap_flag_longitude1--;
					continue;
				}
			}
			if (soap_flag_resolution1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "resolution", &a->ns1__generalMetadata::resolution, "xsd:int"))
				{	soap_flag_resolution1--;
					continue;
				}
			}
			if (soap_flag_shutterSpeed1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_LONG64(soap, "shutterSpeed", &a->ns1__generalMetadata::shutterSpeed, "xsd:long"))
				{	soap_flag_shutterSpeed1--;
					continue;
				}
			}
			if (soap_flag_width1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "width", &a->ns1__generalMetadata::width, "xsd:int"))
				{	soap_flag_width1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_aperture1 > 0 || soap_flag_exposure1 > 0 || soap_flag_fileSize1 > 0 || soap_flag_focalLength1 > 0 || soap_flag_height1 > 0 || soap_flag_iso1 > 0 || soap_flag_latitude1 > 0 || soap_flag_longitude1 > 0 || soap_flag_resolution1 > 0 || soap_flag_shutterSpeed1 > 0 || soap_flag_width1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__generalMetadata *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__generalMetadata, SOAP_TYPE_ns1__generalMetadata, sizeof(ns1__generalMetadata), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__generalMetadata * SOAP_FMAC2 soap_instantiate_ns1__generalMetadata(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__generalMetadata(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__generalMetadata *p;
	size_t k = sizeof(ns1__generalMetadata);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__generalMetadata, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__generalMetadata);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__generalMetadata, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__generalMetadata location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__generalMetadata::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__generalMetadata(soap, tag ? tag : "ns1:generalMetadata", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__generalMetadata::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__generalMetadata(soap, this, tag, type);
}

SOAP_FMAC3 ns1__generalMetadata * SOAP_FMAC4 soap_get_ns1__generalMetadata(struct soap *soap, ns1__generalMetadata *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__generalMetadata(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__node::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__node::detectedBy = NULL;
	this->ns1__node::name = NULL;
}

void ns1__node::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__node::detectedBy);
	soap_serialize_PointerTostd__string(soap, &this->ns1__node::name);
#endif
}

int ns1__node::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__node(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__node(struct soap *soap, const char *tag, int id, const ns1__node *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__node), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "detectedBy", -1, &a->ns1__node::detectedBy, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "name", -1, &a->ns1__node::name, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__node::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__node(soap, tag, this, type);
}

SOAP_FMAC3 ns1__node * SOAP_FMAC4 soap_in_ns1__node(struct soap *soap, const char *tag, ns1__node *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__node*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__node, sizeof(ns1__node), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__node)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__node *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_detectedBy1 = 1;
	size_t soap_flag_name1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_detectedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "detectedBy", &a->ns1__node::detectedBy, "xsd:string"))
				{	soap_flag_detectedBy1--;
					continue;
				}
			}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "name", &a->ns1__node::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__node *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__node, SOAP_TYPE_ns1__node, sizeof(ns1__node), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__node * SOAP_FMAC2 soap_instantiate_ns1__node(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__node(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__node *p;
	size_t k = sizeof(ns1__node);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__node, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__node);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__node, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__node location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__node::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__node(soap, tag ? tag : "ns1:node", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__node::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__node(soap, this, tag, type);
}

SOAP_FMAC3 ns1__node * SOAP_FMAC4 soap_get_ns1__node(struct soap *soap, ns1__node *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__node(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__mmfg::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__node(soap, &this->ns1__mmfg::allNodes);
	this->ns1__mmfg::currentNode = NULL;
	this->ns1__mmfg::generalMetadata = NULL;
	this->ns1__mmfg::security = NULL;
	soap_default_std__vectorTemplateOffloat(soap, &this->ns1__mmfg::similarity);
	soap_default_std__vectorTemplateOffloat(soap, &this->ns1__mmfg::tempSimilarity);
}

void ns1__mmfg::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__node(soap, &this->ns1__mmfg::allNodes);
	soap_serialize_PointerTons1__node(soap, &this->ns1__mmfg::currentNode);
	soap_serialize_PointerTons1__generalMetadata(soap, &this->ns1__mmfg::generalMetadata);
	soap_serialize_PointerTons1__security(soap, &this->ns1__mmfg::security);
	soap_serialize_std__vectorTemplateOffloat(soap, &this->ns1__mmfg::similarity);
	soap_serialize_std__vectorTemplateOffloat(soap, &this->ns1__mmfg::tempSimilarity);
#endif
}

int ns1__mmfg::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__mmfg(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__mmfg(struct soap *soap, const char *tag, int id, const ns1__mmfg *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__mmfg), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__node(soap, "allNodes", -1, &a->ns1__mmfg::allNodes, ""))
		return soap->error;
	if (soap_out_PointerTons1__node(soap, "currentNode", -1, &a->ns1__mmfg::currentNode, ""))
		return soap->error;
	if (soap_out_PointerTons1__generalMetadata(soap, "generalMetadata", -1, &a->ns1__mmfg::generalMetadata, ""))
		return soap->error;
	if (soap_out_PointerTons1__security(soap, "security", -1, &a->ns1__mmfg::security, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOffloat(soap, "similarity", -1, &a->ns1__mmfg::similarity, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOffloat(soap, "tempSimilarity", -1, &a->ns1__mmfg::tempSimilarity, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__mmfg::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__mmfg(soap, tag, this, type);
}

SOAP_FMAC3 ns1__mmfg * SOAP_FMAC4 soap_in_ns1__mmfg(struct soap *soap, const char *tag, ns1__mmfg *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__mmfg*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__mmfg, sizeof(ns1__mmfg), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__mmfg)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__mmfg *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_currentNode1 = 1;
	size_t soap_flag_generalMetadata1 = 1;
	size_t soap_flag_security1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__node(soap, "allNodes", &a->ns1__mmfg::allNodes, "ns1:node"))
					continue;
			}
			if (soap_flag_currentNode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__node(soap, "currentNode", &a->ns1__mmfg::currentNode, "ns1:node"))
				{	soap_flag_currentNode1--;
					continue;
				}
			}
			if (soap_flag_generalMetadata1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__generalMetadata(soap, "generalMetadata", &a->ns1__mmfg::generalMetadata, "ns1:generalMetadata"))
				{	soap_flag_generalMetadata1--;
					continue;
				}
			}
			if (soap_flag_security1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__security(soap, "security", &a->ns1__mmfg::security, "ns1:security"))
				{	soap_flag_security1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOffloat(soap, "similarity", &a->ns1__mmfg::similarity, "xsd:float"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOffloat(soap, "tempSimilarity", &a->ns1__mmfg::tempSimilarity, "xsd:float"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__mmfg *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__mmfg, SOAP_TYPE_ns1__mmfg, sizeof(ns1__mmfg), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__mmfg * SOAP_FMAC2 soap_instantiate_ns1__mmfg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__mmfg(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__mmfg *p;
	size_t k = sizeof(ns1__mmfg);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__mmfg, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__mmfg);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__mmfg, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__mmfg location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__mmfg::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__mmfg(soap, tag ? tag : "ns1:mmfg", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__mmfg::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__mmfg(soap, this, tag, type);
}

SOAP_FMAC3 ns1__mmfg * SOAP_FMAC4 soap_get_ns1__mmfg(struct soap *soap, ns1__mmfg *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__mmfg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processAssetFromURLResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__processAssetFromURLResponse::return_ = NULL;
}

void ns1__processAssetFromURLResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__mmfg(soap, &this->ns1__processAssetFromURLResponse::return_);
#endif
}

int ns1__processAssetFromURLResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processAssetFromURLResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromURLResponse(struct soap *soap, const char *tag, int id, const ns1__processAssetFromURLResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processAssetFromURLResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__mmfg(soap, "return", -1, &a->ns1__processAssetFromURLResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processAssetFromURLResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processAssetFromURLResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processAssetFromURLResponse * SOAP_FMAC4 soap_in_ns1__processAssetFromURLResponse(struct soap *soap, const char *tag, ns1__processAssetFromURLResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processAssetFromURLResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processAssetFromURLResponse, sizeof(ns1__processAssetFromURLResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processAssetFromURLResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processAssetFromURLResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__mmfg(soap, "return", &a->ns1__processAssetFromURLResponse::return_, "ns1:mmfg"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__processAssetFromURLResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processAssetFromURLResponse, SOAP_TYPE_ns1__processAssetFromURLResponse, sizeof(ns1__processAssetFromURLResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processAssetFromURLResponse * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromURLResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processAssetFromURLResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processAssetFromURLResponse *p;
	size_t k = sizeof(ns1__processAssetFromURLResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processAssetFromURLResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processAssetFromURLResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processAssetFromURLResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processAssetFromURLResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processAssetFromURLResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processAssetFromURLResponse(soap, tag ? tag : "ns1:processAssetFromURLResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processAssetFromURLResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processAssetFromURLResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processAssetFromURLResponse * SOAP_FMAC4 soap_get_ns1__processAssetFromURLResponse(struct soap *soap, ns1__processAssetFromURLResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processAssetFromURLResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__processAssetFromURL::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__processAssetFromURL::arg0 = NULL;
	this->ns1__processAssetFromURL::arg1 = NULL;
}

void ns1__processAssetFromURL::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__processAssetFromURL::arg0);
	soap_serialize_PointerToxsd__anyURI(soap, &this->ns1__processAssetFromURL::arg1);
#endif
}

int ns1__processAssetFromURL::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__processAssetFromURL(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__processAssetFromURL(struct soap *soap, const char *tag, int id, const ns1__processAssetFromURL *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__processAssetFromURL), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "arg0", -1, &a->ns1__processAssetFromURL::arg0, ""))
		return soap->error;
	if (soap_out_PointerToxsd__anyURI(soap, "arg1", -1, &a->ns1__processAssetFromURL::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__processAssetFromURL::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__processAssetFromURL(soap, tag, this, type);
}

SOAP_FMAC3 ns1__processAssetFromURL * SOAP_FMAC4 soap_in_ns1__processAssetFromURL(struct soap *soap, const char *tag, ns1__processAssetFromURL *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__processAssetFromURL*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__processAssetFromURL, sizeof(ns1__processAssetFromURL), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__processAssetFromURL)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__processAssetFromURL *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "arg0", &a->ns1__processAssetFromURL::arg0, "xsd:string"))
				{	soap_flag_arg01--;
					continue;
				}
			}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__anyURI(soap, "arg1", &a->ns1__processAssetFromURL::arg1, "xsd:anyURI"))
				{	soap_flag_arg11--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__processAssetFromURL *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__processAssetFromURL, SOAP_TYPE_ns1__processAssetFromURL, sizeof(ns1__processAssetFromURL), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__processAssetFromURL * SOAP_FMAC2 soap_instantiate_ns1__processAssetFromURL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__processAssetFromURL(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__processAssetFromURL *p;
	size_t k = sizeof(ns1__processAssetFromURL);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__processAssetFromURL, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__processAssetFromURL);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__processAssetFromURL, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__processAssetFromURL location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__processAssetFromURL::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__processAssetFromURL(soap, tag ? tag : "ns1:processAssetFromURL", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__processAssetFromURL::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__processAssetFromURL(soap, this, tag, type);
}

SOAP_FMAC3 ns1__processAssetFromURL * SOAP_FMAC4 soap_get_ns1__processAssetFromURL(struct soap *soap, ns1__processAssetFromURL *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__processAssetFromURL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if (s->empty())
		return (soap->mode & SOAP_C_NILSTRING) ? soap_element_null(soap, tag, id, type) : soap_element_empty(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 4, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__anyURI, SOAP_TYPE_xsd__anyURI, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__anyURI(soap, tag ? tag : "xsd:anyURI", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if (s->empty())
		return (soap->mode & SOAP_C_NILSTRING) ? soap_element_null(soap, tag, id, type) : soap_element_empty(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_attachment_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary, this->id, this->type);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSimilarAssets(struct soap *soap, struct __ns1__getSimilarAssets *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSimilarAssets_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSimilarAssets(struct soap *soap, const struct __ns1__getSimilarAssets *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getSimilarAssets(soap, &a->ns1__getSimilarAssets_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSimilarAssets(struct soap *soap, const char *tag, int id, const struct __ns1__getSimilarAssets *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getSimilarAssets(soap, "ns1:getSimilarAssets", -1, &a->ns1__getSimilarAssets_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSimilarAssets * SOAP_FMAC4 soap_in___ns1__getSimilarAssets(struct soap *soap, const char *tag, struct __ns1__getSimilarAssets *a, const char *type)
{
	size_t soap_flag_ns1__getSimilarAssets_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSimilarAssets*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSimilarAssets, sizeof(struct __ns1__getSimilarAssets), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSimilarAssets(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSimilarAssets_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getSimilarAssets(soap, "ns1:getSimilarAssets", &a->ns1__getSimilarAssets_, "ns1:getSimilarAssets"))
				{	soap_flag_ns1__getSimilarAssets_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getSimilarAssets * SOAP_FMAC2 soap_instantiate___ns1__getSimilarAssets(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSimilarAssets(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getSimilarAssets *p;
	size_t k = sizeof(struct __ns1__getSimilarAssets);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getSimilarAssets, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getSimilarAssets);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getSimilarAssets, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getSimilarAssets location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSimilarAssets(struct soap *soap, const struct __ns1__getSimilarAssets *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getSimilarAssets(soap, tag ? tag : "-ns1:getSimilarAssets", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSimilarAssets * SOAP_FMAC4 soap_get___ns1__getSimilarAssets(struct soap *soap, struct __ns1__getSimilarAssets *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSimilarAssets(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRecommendedAssets(struct soap *soap, struct __ns1__getRecommendedAssets *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getRecommendedAssets_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRecommendedAssets(struct soap *soap, const struct __ns1__getRecommendedAssets *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getRecommendedAssets(soap, &a->ns1__getRecommendedAssets_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRecommendedAssets(struct soap *soap, const char *tag, int id, const struct __ns1__getRecommendedAssets *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getRecommendedAssets(soap, "ns1:getRecommendedAssets", -1, &a->ns1__getRecommendedAssets_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRecommendedAssets * SOAP_FMAC4 soap_in___ns1__getRecommendedAssets(struct soap *soap, const char *tag, struct __ns1__getRecommendedAssets *a, const char *type)
{
	size_t soap_flag_ns1__getRecommendedAssets_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getRecommendedAssets*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getRecommendedAssets, sizeof(struct __ns1__getRecommendedAssets), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getRecommendedAssets(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getRecommendedAssets_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getRecommendedAssets(soap, "ns1:getRecommendedAssets", &a->ns1__getRecommendedAssets_, "ns1:getRecommendedAssets"))
				{	soap_flag_ns1__getRecommendedAssets_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getRecommendedAssets * SOAP_FMAC2 soap_instantiate___ns1__getRecommendedAssets(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getRecommendedAssets(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getRecommendedAssets *p;
	size_t k = sizeof(struct __ns1__getRecommendedAssets);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getRecommendedAssets, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getRecommendedAssets);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getRecommendedAssets, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getRecommendedAssets location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRecommendedAssets(struct soap *soap, const struct __ns1__getRecommendedAssets *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getRecommendedAssets(soap, tag ? tag : "-ns1:getRecommendedAssets", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRecommendedAssets * SOAP_FMAC4 soap_get___ns1__getRecommendedAssets(struct soap *soap, struct __ns1__getRecommendedAssets *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getRecommendedAssets(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setProcessingPlugins(struct soap *soap, struct __ns1__setProcessingPlugins *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setProcessingPlugins_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setProcessingPlugins(struct soap *soap, const struct __ns1__setProcessingPlugins *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__setProcessingPlugins(soap, &a->ns1__setProcessingPlugins_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setProcessingPlugins(struct soap *soap, const char *tag, int id, const struct __ns1__setProcessingPlugins *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__setProcessingPlugins(soap, "ns1:setProcessingPlugins", -1, &a->ns1__setProcessingPlugins_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setProcessingPlugins * SOAP_FMAC4 soap_in___ns1__setProcessingPlugins(struct soap *soap, const char *tag, struct __ns1__setProcessingPlugins *a, const char *type)
{
	size_t soap_flag_ns1__setProcessingPlugins_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__setProcessingPlugins*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__setProcessingPlugins, sizeof(struct __ns1__setProcessingPlugins), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__setProcessingPlugins(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setProcessingPlugins_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__setProcessingPlugins(soap, "ns1:setProcessingPlugins", &a->ns1__setProcessingPlugins_, "ns1:setProcessingPlugins"))
				{	soap_flag_ns1__setProcessingPlugins_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__setProcessingPlugins * SOAP_FMAC2 soap_instantiate___ns1__setProcessingPlugins(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__setProcessingPlugins(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__setProcessingPlugins *p;
	size_t k = sizeof(struct __ns1__setProcessingPlugins);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__setProcessingPlugins, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__setProcessingPlugins);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__setProcessingPlugins, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__setProcessingPlugins location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setProcessingPlugins(struct soap *soap, const struct __ns1__setProcessingPlugins *a, const char *tag, const char *type)
{
	if (soap_out___ns1__setProcessingPlugins(soap, tag ? tag : "-ns1:setProcessingPlugins", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setProcessingPlugins * SOAP_FMAC4 soap_get___ns1__setProcessingPlugins(struct soap *soap, struct __ns1__setProcessingPlugins *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__setProcessingPlugins(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getOrGenerateGraphCode(struct soap *soap, struct __ns1__getOrGenerateGraphCode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getOrGenerateGraphCode_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getOrGenerateGraphCode(struct soap *soap, const struct __ns1__getOrGenerateGraphCode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getOrGenerateGraphCode(soap, &a->ns1__getOrGenerateGraphCode_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getOrGenerateGraphCode(struct soap *soap, const char *tag, int id, const struct __ns1__getOrGenerateGraphCode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getOrGenerateGraphCode(soap, "ns1:getOrGenerateGraphCode", -1, &a->ns1__getOrGenerateGraphCode_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getOrGenerateGraphCode * SOAP_FMAC4 soap_in___ns1__getOrGenerateGraphCode(struct soap *soap, const char *tag, struct __ns1__getOrGenerateGraphCode *a, const char *type)
{
	size_t soap_flag_ns1__getOrGenerateGraphCode_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getOrGenerateGraphCode*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getOrGenerateGraphCode, sizeof(struct __ns1__getOrGenerateGraphCode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getOrGenerateGraphCode(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getOrGenerateGraphCode_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getOrGenerateGraphCode(soap, "ns1:getOrGenerateGraphCode", &a->ns1__getOrGenerateGraphCode_, "ns1:getOrGenerateGraphCode"))
				{	soap_flag_ns1__getOrGenerateGraphCode_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getOrGenerateGraphCode * SOAP_FMAC2 soap_instantiate___ns1__getOrGenerateGraphCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getOrGenerateGraphCode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getOrGenerateGraphCode *p;
	size_t k = sizeof(struct __ns1__getOrGenerateGraphCode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getOrGenerateGraphCode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getOrGenerateGraphCode);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getOrGenerateGraphCode, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getOrGenerateGraphCode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getOrGenerateGraphCode(struct soap *soap, const struct __ns1__getOrGenerateGraphCode *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getOrGenerateGraphCode(soap, tag ? tag : "-ns1:getOrGenerateGraphCode", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getOrGenerateGraphCode * SOAP_FMAC4 soap_get___ns1__getOrGenerateGraphCode(struct soap *soap, struct __ns1__getOrGenerateGraphCode *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getOrGenerateGraphCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__processAssetFromURL(struct soap *soap, struct __ns1__processAssetFromURL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__processAssetFromURL_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__processAssetFromURL(struct soap *soap, const struct __ns1__processAssetFromURL *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__processAssetFromURL(soap, &a->ns1__processAssetFromURL_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__processAssetFromURL(struct soap *soap, const char *tag, int id, const struct __ns1__processAssetFromURL *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__processAssetFromURL(soap, "ns1:processAssetFromURL", -1, &a->ns1__processAssetFromURL_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__processAssetFromURL * SOAP_FMAC4 soap_in___ns1__processAssetFromURL(struct soap *soap, const char *tag, struct __ns1__processAssetFromURL *a, const char *type)
{
	size_t soap_flag_ns1__processAssetFromURL_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__processAssetFromURL*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__processAssetFromURL, sizeof(struct __ns1__processAssetFromURL), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__processAssetFromURL(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__processAssetFromURL_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__processAssetFromURL(soap, "ns1:processAssetFromURL", &a->ns1__processAssetFromURL_, "ns1:processAssetFromURL"))
				{	soap_flag_ns1__processAssetFromURL_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__processAssetFromURL * SOAP_FMAC2 soap_instantiate___ns1__processAssetFromURL(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__processAssetFromURL(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__processAssetFromURL *p;
	size_t k = sizeof(struct __ns1__processAssetFromURL);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__processAssetFromURL, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__processAssetFromURL);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__processAssetFromURL, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__processAssetFromURL location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__processAssetFromURL(struct soap *soap, const struct __ns1__processAssetFromURL *a, const char *tag, const char *type)
{
	if (soap_out___ns1__processAssetFromURL(soap, tag ? tag : "-ns1:processAssetFromURL", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__processAssetFromURL * SOAP_FMAC4 soap_get___ns1__processAssetFromURL(struct soap *soap, struct __ns1__processAssetFromURL *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__processAssetFromURL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__processAssetFromBytes(struct soap *soap, struct __ns1__processAssetFromBytes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__processAssetFromBytes_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__processAssetFromBytes(struct soap *soap, const struct __ns1__processAssetFromBytes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__processAssetFromBytes(soap, &a->ns1__processAssetFromBytes_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__processAssetFromBytes(struct soap *soap, const char *tag, int id, const struct __ns1__processAssetFromBytes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__processAssetFromBytes(soap, "ns1:processAssetFromBytes", -1, &a->ns1__processAssetFromBytes_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__processAssetFromBytes * SOAP_FMAC4 soap_in___ns1__processAssetFromBytes(struct soap *soap, const char *tag, struct __ns1__processAssetFromBytes *a, const char *type)
{
	size_t soap_flag_ns1__processAssetFromBytes_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__processAssetFromBytes*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__processAssetFromBytes, sizeof(struct __ns1__processAssetFromBytes), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__processAssetFromBytes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__processAssetFromBytes_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__processAssetFromBytes(soap, "ns1:processAssetFromBytes", &a->ns1__processAssetFromBytes_, "ns1:processAssetFromBytes"))
				{	soap_flag_ns1__processAssetFromBytes_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__processAssetFromBytes * SOAP_FMAC2 soap_instantiate___ns1__processAssetFromBytes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__processAssetFromBytes(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__processAssetFromBytes *p;
	size_t k = sizeof(struct __ns1__processAssetFromBytes);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__processAssetFromBytes, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__processAssetFromBytes);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__processAssetFromBytes, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__processAssetFromBytes location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__processAssetFromBytes(struct soap *soap, const struct __ns1__processAssetFromBytes *a, const char *tag, const char *type)
{
	if (soap_out___ns1__processAssetFromBytes(soap, tag ? tag : "-ns1:processAssetFromBytes", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__processAssetFromBytes * SOAP_FMAC4 soap_get___ns1__processAssetFromBytes(struct soap *soap, struct __ns1__processAssetFromBytes *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__processAssetFromBytes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__processAssetFromFile(struct soap *soap, struct __ns1__processAssetFromFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__processAssetFromFile_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__processAssetFromFile(struct soap *soap, const struct __ns1__processAssetFromFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__processAssetFromFile(soap, &a->ns1__processAssetFromFile_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__processAssetFromFile(struct soap *soap, const char *tag, int id, const struct __ns1__processAssetFromFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__processAssetFromFile(soap, "ns1:processAssetFromFile", -1, &a->ns1__processAssetFromFile_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__processAssetFromFile * SOAP_FMAC4 soap_in___ns1__processAssetFromFile(struct soap *soap, const char *tag, struct __ns1__processAssetFromFile *a, const char *type)
{
	size_t soap_flag_ns1__processAssetFromFile_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__processAssetFromFile*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__processAssetFromFile, sizeof(struct __ns1__processAssetFromFile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__processAssetFromFile(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__processAssetFromFile_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__processAssetFromFile(soap, "ns1:processAssetFromFile", &a->ns1__processAssetFromFile_, "ns1:processAssetFromFile"))
				{	soap_flag_ns1__processAssetFromFile_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__processAssetFromFile * SOAP_FMAC2 soap_instantiate___ns1__processAssetFromFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__processAssetFromFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__processAssetFromFile *p;
	size_t k = sizeof(struct __ns1__processAssetFromFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__processAssetFromFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__processAssetFromFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__processAssetFromFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__processAssetFromFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__processAssetFromFile(struct soap *soap, const struct __ns1__processAssetFromFile *a, const char *tag, const char *type)
{
	if (soap_out___ns1__processAssetFromFile(soap, tag ? tag : "-ns1:processAssetFromFile", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__processAssetFromFile * SOAP_FMAC4 soap_get___ns1__processAssetFromFile(struct soap *soap, struct __ns1__processAssetFromFile *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__processAssetFromFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCollection(struct soap *soap, struct __ns1__getCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getCollection_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCollection(struct soap *soap, const struct __ns1__getCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getCollection(soap, &a->ns1__getCollection_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCollection(struct soap *soap, const char *tag, int id, const struct __ns1__getCollection *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getCollection(soap, "ns1:getCollection", -1, &a->ns1__getCollection_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getCollection * SOAP_FMAC4 soap_in___ns1__getCollection(struct soap *soap, const char *tag, struct __ns1__getCollection *a, const char *type)
{
	size_t soap_flag_ns1__getCollection_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getCollection*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getCollection, sizeof(struct __ns1__getCollection), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getCollection_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getCollection(soap, "ns1:getCollection", &a->ns1__getCollection_, "ns1:getCollection"))
				{	soap_flag_ns1__getCollection_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getCollection * SOAP_FMAC2 soap_instantiate___ns1__getCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getCollection(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getCollection *p;
	size_t k = sizeof(struct __ns1__getCollection);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getCollection, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getCollection);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getCollection, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getCollection location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCollection(struct soap *soap, const struct __ns1__getCollection *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getCollection(soap, tag ? tag : "-ns1:getCollection", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getCollection * SOAP_FMAC4 soap_get___ns1__getCollection(struct soap *soap, struct __ns1__getCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAuthToken(struct soap *soap, struct __ns1__getAuthToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getAuthToken_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAuthToken(struct soap *soap, const struct __ns1__getAuthToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getAuthToken(soap, &a->ns1__getAuthToken_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAuthToken(struct soap *soap, const char *tag, int id, const struct __ns1__getAuthToken *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getAuthToken(soap, "ns1:getAuthToken", -1, &a->ns1__getAuthToken_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getAuthToken * SOAP_FMAC4 soap_in___ns1__getAuthToken(struct soap *soap, const char *tag, struct __ns1__getAuthToken *a, const char *type)
{
	size_t soap_flag_ns1__getAuthToken_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getAuthToken*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getAuthToken, sizeof(struct __ns1__getAuthToken), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getAuthToken(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getAuthToken_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getAuthToken(soap, "ns1:getAuthToken", &a->ns1__getAuthToken_, "ns1:getAuthToken"))
				{	soap_flag_ns1__getAuthToken_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getAuthToken * SOAP_FMAC2 soap_instantiate___ns1__getAuthToken(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getAuthToken(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getAuthToken *p;
	size_t k = sizeof(struct __ns1__getAuthToken);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getAuthToken, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getAuthToken);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getAuthToken, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getAuthToken location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAuthToken(struct soap *soap, const struct __ns1__getAuthToken *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getAuthToken(soap, tag ? tag : "-ns1:getAuthToken", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getAuthToken * SOAP_FMAC4 soap_get___ns1__getAuthToken(struct soap *soap, struct __ns1__getAuthToken *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getAuthToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getSimilarAssets(struct soap *soap, ns1__getSimilarAssets *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getSimilarAssets))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getSimilarAssets(struct soap *soap, const char *tag, int id, ns1__getSimilarAssets *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getSimilarAssets, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getSimilarAssets ? type : NULL);
}

SOAP_FMAC3 ns1__getSimilarAssets ** SOAP_FMAC4 soap_in_PointerTons1__getSimilarAssets(struct soap *soap, const char *tag, ns1__getSimilarAssets **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getSimilarAssets **)soap_malloc(soap, sizeof(ns1__getSimilarAssets *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getSimilarAssets *)soap_instantiate_ns1__getSimilarAssets(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getSimilarAssets **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getSimilarAssets, sizeof(ns1__getSimilarAssets), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getSimilarAssets(struct soap *soap, ns1__getSimilarAssets *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getSimilarAssets(soap, tag ? tag : "ns1:getSimilarAssets", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getSimilarAssets ** SOAP_FMAC4 soap_get_PointerTons1__getSimilarAssets(struct soap *soap, ns1__getSimilarAssets **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getSimilarAssets(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getRecommendedAssets(struct soap *soap, ns1__getRecommendedAssets *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getRecommendedAssets))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getRecommendedAssets(struct soap *soap, const char *tag, int id, ns1__getRecommendedAssets *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getRecommendedAssets, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getRecommendedAssets ? type : NULL);
}

SOAP_FMAC3 ns1__getRecommendedAssets ** SOAP_FMAC4 soap_in_PointerTons1__getRecommendedAssets(struct soap *soap, const char *tag, ns1__getRecommendedAssets **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getRecommendedAssets **)soap_malloc(soap, sizeof(ns1__getRecommendedAssets *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getRecommendedAssets *)soap_instantiate_ns1__getRecommendedAssets(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getRecommendedAssets **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getRecommendedAssets, sizeof(ns1__getRecommendedAssets), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getRecommendedAssets(struct soap *soap, ns1__getRecommendedAssets *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getRecommendedAssets(soap, tag ? tag : "ns1:getRecommendedAssets", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getRecommendedAssets ** SOAP_FMAC4 soap_get_PointerTons1__getRecommendedAssets(struct soap *soap, ns1__getRecommendedAssets **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getRecommendedAssets(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__setProcessingPlugins(struct soap *soap, ns1__setProcessingPlugins *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__setProcessingPlugins))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__setProcessingPlugins(struct soap *soap, const char *tag, int id, ns1__setProcessingPlugins *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__setProcessingPlugins, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__setProcessingPlugins ? type : NULL);
}

SOAP_FMAC3 ns1__setProcessingPlugins ** SOAP_FMAC4 soap_in_PointerTons1__setProcessingPlugins(struct soap *soap, const char *tag, ns1__setProcessingPlugins **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__setProcessingPlugins **)soap_malloc(soap, sizeof(ns1__setProcessingPlugins *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__setProcessingPlugins *)soap_instantiate_ns1__setProcessingPlugins(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__setProcessingPlugins **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__setProcessingPlugins, sizeof(ns1__setProcessingPlugins), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__setProcessingPlugins(struct soap *soap, ns1__setProcessingPlugins *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__setProcessingPlugins(soap, tag ? tag : "ns1:setProcessingPlugins", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__setProcessingPlugins ** SOAP_FMAC4 soap_get_PointerTons1__setProcessingPlugins(struct soap *soap, ns1__setProcessingPlugins **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__setProcessingPlugins(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getOrGenerateGraphCode(struct soap *soap, ns1__getOrGenerateGraphCode *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getOrGenerateGraphCode))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getOrGenerateGraphCode(struct soap *soap, const char *tag, int id, ns1__getOrGenerateGraphCode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getOrGenerateGraphCode, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getOrGenerateGraphCode ? type : NULL);
}

SOAP_FMAC3 ns1__getOrGenerateGraphCode ** SOAP_FMAC4 soap_in_PointerTons1__getOrGenerateGraphCode(struct soap *soap, const char *tag, ns1__getOrGenerateGraphCode **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getOrGenerateGraphCode **)soap_malloc(soap, sizeof(ns1__getOrGenerateGraphCode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getOrGenerateGraphCode *)soap_instantiate_ns1__getOrGenerateGraphCode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getOrGenerateGraphCode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getOrGenerateGraphCode, sizeof(ns1__getOrGenerateGraphCode), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getOrGenerateGraphCode(struct soap *soap, ns1__getOrGenerateGraphCode *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getOrGenerateGraphCode(soap, tag ? tag : "ns1:getOrGenerateGraphCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getOrGenerateGraphCode ** SOAP_FMAC4 soap_get_PointerTons1__getOrGenerateGraphCode(struct soap *soap, ns1__getOrGenerateGraphCode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getOrGenerateGraphCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__processAssetFromURL(struct soap *soap, ns1__processAssetFromURL *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__processAssetFromURL))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__processAssetFromURL(struct soap *soap, const char *tag, int id, ns1__processAssetFromURL *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__processAssetFromURL, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__processAssetFromURL ? type : NULL);
}

SOAP_FMAC3 ns1__processAssetFromURL ** SOAP_FMAC4 soap_in_PointerTons1__processAssetFromURL(struct soap *soap, const char *tag, ns1__processAssetFromURL **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__processAssetFromURL **)soap_malloc(soap, sizeof(ns1__processAssetFromURL *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__processAssetFromURL *)soap_instantiate_ns1__processAssetFromURL(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__processAssetFromURL **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__processAssetFromURL, sizeof(ns1__processAssetFromURL), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__processAssetFromURL(struct soap *soap, ns1__processAssetFromURL *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__processAssetFromURL(soap, tag ? tag : "ns1:processAssetFromURL", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__processAssetFromURL ** SOAP_FMAC4 soap_get_PointerTons1__processAssetFromURL(struct soap *soap, ns1__processAssetFromURL **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__processAssetFromURL(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__processAssetFromBytes(struct soap *soap, ns1__processAssetFromBytes *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__processAssetFromBytes))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__processAssetFromBytes(struct soap *soap, const char *tag, int id, ns1__processAssetFromBytes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__processAssetFromBytes, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__processAssetFromBytes ? type : NULL);
}

SOAP_FMAC3 ns1__processAssetFromBytes ** SOAP_FMAC4 soap_in_PointerTons1__processAssetFromBytes(struct soap *soap, const char *tag, ns1__processAssetFromBytes **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__processAssetFromBytes **)soap_malloc(soap, sizeof(ns1__processAssetFromBytes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__processAssetFromBytes *)soap_instantiate_ns1__processAssetFromBytes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__processAssetFromBytes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__processAssetFromBytes, sizeof(ns1__processAssetFromBytes), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__processAssetFromBytes(struct soap *soap, ns1__processAssetFromBytes *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__processAssetFromBytes(soap, tag ? tag : "ns1:processAssetFromBytes", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__processAssetFromBytes ** SOAP_FMAC4 soap_get_PointerTons1__processAssetFromBytes(struct soap *soap, ns1__processAssetFromBytes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__processAssetFromBytes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__processAssetFromFile(struct soap *soap, ns1__processAssetFromFile *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__processAssetFromFile))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__processAssetFromFile(struct soap *soap, const char *tag, int id, ns1__processAssetFromFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__processAssetFromFile, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__processAssetFromFile ? type : NULL);
}

SOAP_FMAC3 ns1__processAssetFromFile ** SOAP_FMAC4 soap_in_PointerTons1__processAssetFromFile(struct soap *soap, const char *tag, ns1__processAssetFromFile **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__processAssetFromFile **)soap_malloc(soap, sizeof(ns1__processAssetFromFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__processAssetFromFile *)soap_instantiate_ns1__processAssetFromFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__processAssetFromFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__processAssetFromFile, sizeof(ns1__processAssetFromFile), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__processAssetFromFile(struct soap *soap, ns1__processAssetFromFile *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__processAssetFromFile(soap, tag ? tag : "ns1:processAssetFromFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__processAssetFromFile ** SOAP_FMAC4 soap_get_PointerTons1__processAssetFromFile(struct soap *soap, ns1__processAssetFromFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__processAssetFromFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getCollection(struct soap *soap, ns1__getCollection *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getCollection))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getCollection(struct soap *soap, const char *tag, int id, ns1__getCollection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getCollection, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getCollection ? type : NULL);
}

SOAP_FMAC3 ns1__getCollection ** SOAP_FMAC4 soap_in_PointerTons1__getCollection(struct soap *soap, const char *tag, ns1__getCollection **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getCollection **)soap_malloc(soap, sizeof(ns1__getCollection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getCollection *)soap_instantiate_ns1__getCollection(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getCollection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getCollection, sizeof(ns1__getCollection), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getCollection(struct soap *soap, ns1__getCollection *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getCollection(soap, tag ? tag : "ns1:getCollection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getCollection ** SOAP_FMAC4 soap_get_PointerTons1__getCollection(struct soap *soap, ns1__getCollection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getAuthToken(struct soap *soap, ns1__getAuthToken *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getAuthToken))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getAuthToken(struct soap *soap, const char *tag, int id, ns1__getAuthToken *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getAuthToken, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getAuthToken ? type : NULL);
}

SOAP_FMAC3 ns1__getAuthToken ** SOAP_FMAC4 soap_in_PointerTons1__getAuthToken(struct soap *soap, const char *tag, ns1__getAuthToken **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getAuthToken **)soap_malloc(soap, sizeof(ns1__getAuthToken *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getAuthToken *)soap_instantiate_ns1__getAuthToken(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getAuthToken **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getAuthToken, sizeof(ns1__getAuthToken), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getAuthToken(struct soap *soap, ns1__getAuthToken *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getAuthToken(soap, tag ? tag : "ns1:getAuthToken", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getAuthToken ** SOAP_FMAC4 soap_get_PointerTons1__getAuthToken(struct soap *soap, ns1__getAuthToken **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getAuthToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, *a ? (*a)->__ptr : NULL, *a ? (*a)->__size : 0, type, SOAP_TYPE_xsd__base64Binary, NULL);
	if (!*a || id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_xsd__base64Binary ? type : NULL);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__graphCode(struct soap *soap, ns1__graphCode *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__graphCode))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__graphCode(struct soap *soap, const char *tag, int id, ns1__graphCode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__graphCode, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__graphCode ? type : NULL);
}

SOAP_FMAC3 ns1__graphCode ** SOAP_FMAC4 soap_in_PointerTons1__graphCode(struct soap *soap, const char *tag, ns1__graphCode **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__graphCode **)soap_malloc(soap, sizeof(ns1__graphCode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__graphCode *)soap_instantiate_ns1__graphCode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__graphCode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__graphCode, sizeof(ns1__graphCode), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__graphCode(struct soap *soap, ns1__graphCode *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__graphCode(soap, tag ? tag : "ns1:graphCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__graphCode ** SOAP_FMAC4 soap_get_PointerTons1__graphCode(struct soap *soap, ns1__graphCode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__graphCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap *soap, time_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_dateTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_dateTime, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_dateTime(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_dateTime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_dateTime, sizeof(time_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__security(struct soap *soap, ns1__security *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__security))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__security(struct soap *soap, const char *tag, int id, ns1__security *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__security, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__security ? type : NULL);
}

SOAP_FMAC3 ns1__security ** SOAP_FMAC4 soap_in_PointerTons1__security(struct soap *soap, const char *tag, ns1__security **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__security **)soap_malloc(soap, sizeof(ns1__security *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__security *)soap_instantiate_ns1__security(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__security **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__security, sizeof(ns1__security), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__security(struct soap *soap, ns1__security *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__security(soap, tag ? tag : "ns1:security", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__security ** SOAP_FMAC4 soap_get_PointerTons1__security(struct soap *soap, ns1__security **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__security(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__generalMetadata(struct soap *soap, ns1__generalMetadata *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__generalMetadata))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__generalMetadata(struct soap *soap, const char *tag, int id, ns1__generalMetadata *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__generalMetadata, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__generalMetadata ? type : NULL);
}

SOAP_FMAC3 ns1__generalMetadata ** SOAP_FMAC4 soap_in_PointerTons1__generalMetadata(struct soap *soap, const char *tag, ns1__generalMetadata **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__generalMetadata **)soap_malloc(soap, sizeof(ns1__generalMetadata *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__generalMetadata *)soap_instantiate_ns1__generalMetadata(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__generalMetadata **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__generalMetadata, sizeof(ns1__generalMetadata), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__generalMetadata(struct soap *soap, ns1__generalMetadata *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__generalMetadata(soap, tag ? tag : "ns1:generalMetadata", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__generalMetadata ** SOAP_FMAC4 soap_get_PointerTons1__generalMetadata(struct soap *soap, ns1__generalMetadata **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__generalMetadata(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__node(struct soap *soap, ns1__node *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__node))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__node(struct soap *soap, const char *tag, int id, ns1__node *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__node, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__node ? type : NULL);
}

SOAP_FMAC3 ns1__node ** SOAP_FMAC4 soap_in_PointerTons1__node(struct soap *soap, const char *tag, ns1__node **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__node **)soap_malloc(soap, sizeof(ns1__node *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__node *)soap_instantiate_ns1__node(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__node **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__node, sizeof(ns1__node), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__node(struct soap *soap, ns1__node *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__node(soap, tag ? tag : "ns1:node", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__node ** SOAP_FMAC4 soap_get_PointerTons1__node(struct soap *soap, ns1__node **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__node(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__mmfg(struct soap *soap, ns1__mmfg *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__mmfg))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__mmfg(struct soap *soap, const char *tag, int id, ns1__mmfg *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__mmfg, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__mmfg ? type : NULL);
}

SOAP_FMAC3 ns1__mmfg ** SOAP_FMAC4 soap_in_PointerTons1__mmfg(struct soap *soap, const char *tag, ns1__mmfg **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__mmfg **)soap_malloc(soap, sizeof(ns1__mmfg *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__mmfg *)soap_instantiate_ns1__mmfg(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__mmfg **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__mmfg, sizeof(ns1__mmfg), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__mmfg(struct soap *soap, ns1__mmfg *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__mmfg(soap, tag ? tag : "ns1:mmfg", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__mmfg ** SOAP_FMAC4 soap_get_PointerTons1__mmfg(struct soap *soap, ns1__mmfg **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__mmfg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI))
		soap_serialize_xsd__anyURI(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__anyURI, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__anyURI(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__anyURI(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyURI, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__anyURI(soap, tag ? tag : "xsd:anyURI", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__mmfg(struct soap *soap, std::vector<ns1__mmfg *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__mmfg(struct soap *soap, const std::vector<ns1__mmfg *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__mmfg *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__mmfg(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__mmfg(struct soap *soap, const char *tag, int id, const std::vector<ns1__mmfg *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__mmfg *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__mmfg(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__mmfg *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__mmfg(struct soap *soap, const char *tag, std::vector<ns1__mmfg *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__mmfg(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__mmfg *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__mmfg, SOAP_TYPE_std__vectorTemplateOfPointerTons1__mmfg, sizeof(ns1__mmfg), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__mmfg(soap, tag, NULL, "ns1:mmfg"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__mmfg(soap, tag, &n, "ns1:mmfg"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__mmfg *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__mmfg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__mmfg(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__mmfg *> *p;
	size_t k = sizeof(std::vector<ns1__mmfg *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__mmfg, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__mmfg *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__mmfg *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__mmfg *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		std::string n;
		soap_default_std__string(soap, &n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{	if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(std::string));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::string> *p;
	size_t k = sizeof(std::vector<std::string> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<std::string> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<std::string> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::string>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOffloat(struct soap *soap, std::vector<float> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOffloat(struct soap *soap, const std::vector<float> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOffloat(struct soap *soap, const char *tag, int id, const std::vector<float> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<float> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_float(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<float> * SOAP_FMAC4 soap_in_std__vectorTemplateOffloat(struct soap *soap, const char *tag, std::vector<float> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOffloat(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		float n;
		soap_default_float(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_float, SOAP_TYPE_std__vectorTemplateOffloat, sizeof(float), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_float(soap, tag, NULL, "xsd:float"))
				break;
		}
		else
		{	if (!soap_in_float(soap, tag, &n, "xsd:float"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<float>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOffloat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOffloat(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<float> *p;
	size_t k = sizeof(std::vector<float> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOffloat, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<float> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<float> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<float>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__node(struct soap *soap, std::vector<ns1__node *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__node(struct soap *soap, const std::vector<ns1__node *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__node *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__node(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__node(struct soap *soap, const char *tag, int id, const std::vector<ns1__node *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__node *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__node(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__node *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__node(struct soap *soap, const char *tag, std::vector<ns1__node *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__node(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__node *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__node, SOAP_TYPE_std__vectorTemplateOfPointerTons1__node, sizeof(ns1__node), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__node(soap, tag, NULL, "ns1:node"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__node(soap, tag, &n, "ns1:node"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__node *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__node(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__node(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__node *> *p;
	size_t k = sizeof(std::vector<ns1__node *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__node, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__node *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__node *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__node *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
